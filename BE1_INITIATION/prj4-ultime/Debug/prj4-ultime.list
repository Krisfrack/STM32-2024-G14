
prj4-ultime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006264  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c4  080065c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065cc  080065cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065d0  080065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080065d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000078  0800664c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  0800664c  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001612d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d38  00000000  00000000  000361d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e7d  00000000  00000000  0003b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bb2  00000000  00000000  00064215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7193  00000000  00000000  0007bdc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005848  00000000  00000000  00172fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063dc 	.word	0x080063dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080063dc 	.word	0x080063dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0xc4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <MX_GPIO_Init+0xc4>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_GPIO_Init+0xc4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f001 fad3 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <MX_GPIO_Init+0xc8>)
 800060e:	f001 f91b 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000612:	2320      	movs	r3, #32
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 f90c 	bl	8001848 <HAL_GPIO_Init>

}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800

08000640 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_I2C1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_I2C1_Init+0x74>)
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <MX_I2C1_Init+0x7c>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x74>)
 800067c:	f001 faa6 	bl	8001bcc <HAL_I2C_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000686:	f000 fb51 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x74>)
 800068e:	f002 fa05 	bl	8002a9c <HAL_I2CEx_ConfigAnalogFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000698:	f000 fb48 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2C1_Init+0x74>)
 80006a0:	f002 fa47 	bl	8002b32 <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 fb3f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000094 	.word	0x20000094
 80006b8:	40005400 	.word	0x40005400
 80006bc:	10909cec 	.word	0x10909cec

080006c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0ac      	sub	sp, #176	; 0xb0
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2288      	movs	r2, #136	; 0x88
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 fe6f 	bl	80053c4 <memset>
  if(i2cHandle->Instance==I2C1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a21      	ldr	r2, [pc, #132]	; (8000770 <HAL_I2C_MspInit+0xb0>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d13b      	bne.n	8000768 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 f8c9 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000708:	f000 fb10 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073e:	2304      	movs	r3, #4
 8000740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000748:	4619      	mov	r1, r3
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_I2C_MspInit+0xb8>)
 800074c:	f001 f87c 	bl	8001848 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6593      	str	r3, [r2, #88]	; 0x58
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 800075e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	37b0      	adds	r7, #176	; 0xb0
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400

0800077c <lcd_init>:

/*
 * @param I2Cx : I2C1, I2C2, I2C3 par exemple
 */
void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af02      	add	r7, sp, #8
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	f043 030c 	orr.w	r3, r3, #12
 8000792:	b2da      	uxtb	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f043 0320 	orr.w	r3, r3, #32
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, 2, 10);
 80007a8:	f107 0118 	add.w	r1, r7, #24
 80007ac:	230a      	movs	r3, #10
 80007ae:	2202      	movs	r2, #2
 80007b0:	486c      	ldr	r0, [pc, #432]	; (8000964 <lcd_init+0x1e8>)
 80007b2:	f004 f897 	bl	80048e4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007b6:	f640 230d 	movw	r3, #2573	; 0xa0d
 80007ba:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007bc:	f107 0114 	add.w	r1, r7, #20
 80007c0:	230a      	movs	r3, #10
 80007c2:	2202      	movs	r2, #2
 80007c4:	4867      	ldr	r0, [pc, #412]	; (8000964 <lcd_init+0x1e8>)
 80007c6:	f004 f88d 	bl	80048e4 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle, LCD_ADDRESS, 5, 100);
 80007ca:	2364      	movs	r3, #100	; 0x64
 80007cc:	2205      	movs	r2, #5
 80007ce:	217c      	movs	r1, #124	; 0x7c
 80007d0:	69f8      	ldr	r0, [r7, #28]
 80007d2:	f001 fd8f 	bl	80022f4 <HAL_I2C_IsDeviceReady>
 80007d6:	4603      	mov	r3, r0
 80007d8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2, &status, 1, 10);
 80007da:	f107 0113 	add.w	r1, r7, #19
 80007de:	230a      	movs	r3, #10
 80007e0:	2201      	movs	r2, #1
 80007e2:	4860      	ldr	r0, [pc, #384]	; (8000964 <lcd_init+0x1e8>)
 80007e4:	f004 f87e 	bl	80048e4 <HAL_UART_Transmit>
	HAL_Delay(50);
 80007e8:	2032      	movs	r0, #50	; 0x32
 80007ea:	f000 fef7 	bl	80015dc <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data, 2, 5000);
 80007ee:	f107 0218 	add.w	r2, r7, #24
 80007f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2302      	movs	r3, #2
 80007fa:	217c      	movs	r1, #124	; 0x7c
 80007fc:	69f8      	ldr	r0, [r7, #28]
 80007fe:	f001 fa75 	bl	8001cec <HAL_I2C_Master_Transmit>
 8000802:	4603      	mov	r3, r0
 8000804:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2, &status2, 1, 10);
 8000806:	f107 0112 	add.w	r1, r7, #18
 800080a:	230a      	movs	r3, #10
 800080c:	2201      	movs	r2, #1
 800080e:	4855      	ldr	r0, [pc, #340]	; (8000964 <lcd_init+0x1e8>)
 8000810:	f004 f868 	bl	80048e4 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000814:	2032      	movs	r0, #50	; 0x32
 8000816:	f000 fee1 	bl	80015dc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data, 2, 5000);
 800081a:	f107 0218 	add.w	r2, r7, #24
 800081e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2302      	movs	r3, #2
 8000826:	217c      	movs	r1, #124	; 0x7c
 8000828:	69f8      	ldr	r0, [r7, #28]
 800082a:	f001 fa5f 	bl	8001cec <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800082e:	2005      	movs	r0, #5
 8000830:	f000 fed4 	bl	80015dc <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data, 2, 5000);
 8000834:	f107 0218 	add.w	r2, r7, #24
 8000838:	f241 3388 	movw	r3, #5000	; 0x1388
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2302      	movs	r3, #2
 8000840:	217c      	movs	r1, #124	; 0x7c
 8000842:	69f8      	ldr	r0, [r7, #28]
 8000844:	f001 fa52 	bl	8001cec <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2204      	movs	r2, #4
 800084c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	785b      	ldrb	r3, [r3, #1]
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	b2db      	uxtb	r3, r3
 8000858:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data, 2, 1000);
 800085a:	f107 0218 	add.w	r2, r7, #24
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2302      	movs	r3, #2
 8000866:	217c      	movs	r1, #124	; 0x7c
 8000868:	69f8      	ldr	r0, [r7, #28]
 800086a:	f001 fa3f 	bl	8001cec <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800086e:	2301      	movs	r3, #1
 8000870:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data, 2, 1000);
 8000872:	f107 0218 	add.w	r2, r7, #24
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2302      	movs	r3, #2
 800087e:	217c      	movs	r1, #124	; 0x7c
 8000880:	69f8      	ldr	r0, [r7, #28]
 8000882:	f001 fa33 	bl	8001cec <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000886:	2002      	movs	r0, #2
 8000888:	f000 fea8 	bl	80015dc <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2202      	movs	r2, #2
 8000890:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	789b      	ldrb	r3, [r3, #2]
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	b2db      	uxtb	r3, r3
 800089c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data, 2, 1000);
 800089e:	f107 0218 	add.w	r2, r7, #24
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2302      	movs	r3, #2
 80008aa:	217c      	movs	r1, #124	; 0x7c
 80008ac:	69f8      	ldr	r0, [r7, #28]
 80008ae:	f001 fa1d 	bl	8001cec <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
	uint8_t data_backlight[2];
	data_backlight[0] = REG_MODE1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	743b      	strb	r3, [r7, #16]
	data_backlight[1] = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight, 2, 1000);
 80008ba:	f107 0210 	add.w	r2, r7, #16
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2302      	movs	r3, #2
 80008c6:	21c4      	movs	r1, #196	; 0xc4
 80008c8:	69f8      	ldr	r0, [r7, #28]
 80008ca:	f001 fa0f 	bl	8001cec <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_OUTPUT;
 80008ce:	2308      	movs	r3, #8
 80008d0:	743b      	strb	r3, [r7, #16]
	data_backlight[1] = 0xFF;
 80008d2:	23ff      	movs	r3, #255	; 0xff
 80008d4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight, 2, 1000);
 80008d6:	f107 0210 	add.w	r2, r7, #16
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	21c4      	movs	r1, #196	; 0xc4
 80008e4:	69f8      	ldr	r0, [r7, #28]
 80008e6:	f001 fa01 	bl	8001cec <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_MODE2;
 80008ea:	2301      	movs	r3, #1
 80008ec:	743b      	strb	r3, [r7, #16]
	data_backlight[1] = 0x20;
 80008ee:	2320      	movs	r3, #32
 80008f0:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight, 2, 1000);
 80008f2:	f107 0210 	add.w	r2, r7, #16
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2302      	movs	r3, #2
 80008fe:	21c4      	movs	r1, #196	; 0xc4
 8000900:	69f8      	ldr	r0, [r7, #28]
 8000902:	f001 f9f3 	bl	8001cec <HAL_I2C_Master_Transmit>

	//couleur du LCD en Blanc
	uint8_t data_rgb[2];
	data_rgb[0] = REG_RED;
 8000906:	2304      	movs	r3, #4
 8000908:	733b      	strb	r3, [r7, #12]
	data_rgb[1] = 255;
 800090a:	23ff      	movs	r3, #255	; 0xff
 800090c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb, 2, 1000);
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2302      	movs	r3, #2
 800091a:	21c4      	movs	r1, #196	; 0xc4
 800091c:	69f8      	ldr	r0, [r7, #28]
 800091e:	f001 f9e5 	bl	8001cec <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_GREEN;
 8000922:	2303      	movs	r3, #3
 8000924:	733b      	strb	r3, [r7, #12]
	data_rgb[1] = 255;
 8000926:	23ff      	movs	r3, #255	; 0xff
 8000928:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb, 2, 1000);
 800092a:	f107 020c 	add.w	r2, r7, #12
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2302      	movs	r3, #2
 8000936:	21c4      	movs	r1, #196	; 0xc4
 8000938:	69f8      	ldr	r0, [r7, #28]
 800093a:	f001 f9d7 	bl	8001cec <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_BLUE;
 800093e:	2302      	movs	r3, #2
 8000940:	733b      	strb	r3, [r7, #12]
	data_rgb[1] = 255;
 8000942:	23ff      	movs	r3, #255	; 0xff
 8000944:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb, 2, 1000);
 8000946:	f107 020c 	add.w	r2, r7, #12
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2302      	movs	r3, #2
 8000952:	21c4      	movs	r1, #196	; 0xc4
 8000954:	69f8      	ldr	r0, [r7, #28]
 8000956:	f001 f9c9 	bl	8001cec <HAL_I2C_Master_Transmit>
}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200001c4 	.word	0x200001c4

08000968 <lcd_clear>:

void lcd_clear(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <lcd_clear+0x2c>)
 8000972:	f000 f83c 	bl	80009ee <lcd_position>
	lcd_print(&hi2c1,"                ");
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <lcd_clear+0x30>)
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <lcd_clear+0x2c>)
 800097a:	f000 f80f 	bl	800099c <lcd_print>
	lcd_position(&hi2c1,0,1);
 800097e:	2201      	movs	r2, #1
 8000980:	2100      	movs	r1, #0
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <lcd_clear+0x2c>)
 8000984:	f000 f833 	bl	80009ee <lcd_position>
	lcd_print(&hi2c1,"                ");
 8000988:	4903      	ldr	r1, [pc, #12]	; (8000998 <lcd_clear+0x30>)
 800098a:	4802      	ldr	r0, [pc, #8]	; (8000994 <lcd_clear+0x2c>)
 800098c:	f000 f806 	bl	800099c <lcd_print>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000094 	.word	0x20000094
 8000998:	080063f4 	.word	0x080063f4

0800099c <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data, 2, 1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	733b      	strb	r3, [r7, #12]
    int i=0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009b2:	e011      	b.n	80009d8 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, (uint8_t *) data, 2, 1000);
 80009be:	f107 020c 	add.w	r2, r7, #12
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2302      	movs	r3, #2
 80009ca:	217c      	movs	r1, #124	; 0x7c
 80009cc:	6938      	ldr	r0, [r7, #16]
 80009ce:	f001 f98d 	bl	8001cec <HAL_I2C_Master_Transmit>
            i++;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1e7      	bne.n	80009b4 <lcd_print+0x18>
   }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx, char col, char row) // position du curseur le lcd
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af02      	add	r7, sp, #8
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	460b      	mov	r3, r1
 80009f8:	70fb      	strb	r3, [r7, #3]
 80009fa:	4613      	mov	r3, r2
 80009fc:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]
    if (row == 0)
 8000a02:	78bb      	ldrb	r3, [r7, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d104      	bne.n	8000a12 <lcd_position+0x24>
        col = col | 0x80;
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a0e:	70fb      	strb	r3, [r7, #3]
 8000a10:	e003      	b.n	8000a1a <lcd_position+0x2c>
    else
        col = col | 0xc0;
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000a18:	70fb      	strb	r3, [r7, #3]

    char data[2];
    data[0] = 0x80;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000a22:	f107 0208 	add.w	r2, r7, #8
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	217c      	movs	r1, #124	; 0x7c
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f001 f95b 	bl	8001cec <HAL_I2C_Master_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	71bb      	strb	r3, [r7, #6]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <reglagecouleur+0x74>)
 8000a54:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000a56:	2304      	movs	r3, #4
 8000a58:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8000a5e:	f107 0210 	add.w	r2, r7, #16
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2302      	movs	r3, #2
 8000a6a:	21c4      	movs	r1, #196	; 0xc4
 8000a6c:	6978      	ldr	r0, [r7, #20]
 8000a6e:	f001 f93d 	bl	8001cec <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000a72:	2303      	movs	r3, #3
 8000a74:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8000a7a:	f107 020c 	add.w	r2, r7, #12
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	21c4      	movs	r1, #196	; 0xc4
 8000a88:	6978      	ldr	r0, [r7, #20]
 8000a8a:	f001 f92f 	bl	8001cec <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000a92:	797b      	ldrb	r3, [r7, #5]
 8000a94:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000a96:	f107 0208 	add.w	r2, r7, #8
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	21c4      	movs	r1, #196	; 0xc4
 8000aa4:	6978      	ldr	r0, [r7, #20]
 8000aa6:	f001 f921 	bl	8001cec <HAL_I2C_Master_Transmit>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000094 	.word	0x20000094

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b0b4      	sub	sp, #208	; 0xd0
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fd11 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f8bf 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f7ff fd55 	bl	8000574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aca:	f000 fc0f 	bl	80012ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ace:	f7ff fdb7 	bl	8000640 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ad2:	f000 fbdb 	bl	800128c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000ad6:	f000 fb8b 	bl	80011f0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000ada:	484d      	ldr	r0, [pc, #308]	; (8000c10 <main+0x158>)
 8000adc:	f003 fbee 	bl	80042bc <HAL_TIM_Base_Start_IT>
  lcd_init(&hi2c1, &LCD_datastruct);
 8000ae0:	494c      	ldr	r1, [pc, #304]	; (8000c14 <main+0x15c>)
 8000ae2:	484d      	ldr	r0, [pc, #308]	; (8000c18 <main+0x160>)
 8000ae4:	f7ff fe4a 	bl	800077c <lcd_init>
  reglagecouleur(100, 100, 100);
 8000ae8:	2264      	movs	r2, #100	; 0x64
 8000aea:	2164      	movs	r1, #100	; 0x64
 8000aec:	2064      	movs	r0, #100	; 0x64
 8000aee:	f7ff ffa7 	bl	8000a40 <reglagecouleur>
  lcd_clear();
 8000af2:	f7ff ff39 	bl	8000968 <lcd_clear>
  sht3x_init(&sht_handle);
 8000af6:	4849      	ldr	r0, [pc, #292]	; (8000c1c <main+0x164>)
 8000af8:	f000 f98e 	bl	8000e18 <sht3x_init>

  float hum = 16;
 8000afc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  char ent_hum[64];

  float temp = 97;
 8000b04:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <main+0x168>)
 8000b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Echantillonnage
	  lcd_position(&hi2c1, 13, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	210d      	movs	r1, #13
 8000b0e:	4842      	ldr	r0, [pc, #264]	; (8000c18 <main+0x160>)
 8000b10:	f7ff ff6d 	bl	80009ee <lcd_position>
	  if (sht3x_read_temperature_and_humidity(&sht_handle, &temp, &hum) == true)
 8000b14:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000b18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	483f      	ldr	r0, [pc, #252]	; (8000c1c <main+0x164>)
 8000b20:	f000 f9ba 	bl	8000e98 <sht3x_read_temperature_and_humidity>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <main+0x7c>
		  lcd_print(&hi2c1, "OK");
 8000b2a:	493e      	ldr	r1, [pc, #248]	; (8000c24 <main+0x16c>)
 8000b2c:	483a      	ldr	r0, [pc, #232]	; (8000c18 <main+0x160>)
 8000b2e:	f7ff ff35 	bl	800099c <lcd_print>
 8000b32:	e003      	b.n	8000b3c <main+0x84>
	  else
		  lcd_print(&hi2c1, " !");
 8000b34:	493c      	ldr	r1, [pc, #240]	; (8000c28 <main+0x170>)
 8000b36:	4838      	ldr	r0, [pc, #224]	; (8000c18 <main+0x160>)
 8000b38:	f7ff ff30 	bl	800099c <lcd_print>

	  // Parsing
	  itoa((int)hum, ent_hum, 10);
 8000b3c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8000b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b48:	220a      	movs	r2, #10
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	ee17 0a90 	vmov	r0, s15
 8000b50:	f004 fc36 	bl	80053c0 <itoa>
	  itoa((int)temp, ent_temp, 10);
 8000b54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b60:	220a      	movs	r2, #10
 8000b62:	4619      	mov	r1, r3
 8000b64:	ee17 0a90 	vmov	r0, s15
 8000b68:	f004 fc2a 	bl	80053c0 <itoa>
	  dec_T = (int)(temp * 10) % 10;
 8000b6c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000b70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7c:	ee17 2a90 	vmov	r2, s15
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <main+0x174>)
 8000b82:	fb83 1302 	smull	r1, r3, r3, r2
 8000b86:	1099      	asrs	r1, r3, #2
 8000b88:	17d3      	asrs	r3, r2, #31
 8000b8a:	1ac9      	subs	r1, r1, r3
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	440b      	add	r3, r1
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  itoa(dec_T, dec_temp, 10);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000ba4:	f004 fc0c 	bl	80053c0 <itoa>

	  // Affichage
	  lcd_position(&hi2c1, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	481a      	ldr	r0, [pc, #104]	; (8000c18 <main+0x160>)
 8000bae:	f7ff ff1e 	bl	80009ee <lcd_position>
	  lcd_print(&hi2c1, "T: ");
 8000bb2:	491f      	ldr	r1, [pc, #124]	; (8000c30 <main+0x178>)
 8000bb4:	4818      	ldr	r0, [pc, #96]	; (8000c18 <main+0x160>)
 8000bb6:	f7ff fef1 	bl	800099c <lcd_print>
	  lcd_print(&hi2c1, ent_temp);
 8000bba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4815      	ldr	r0, [pc, #84]	; (8000c18 <main+0x160>)
 8000bc2:	f7ff feeb 	bl	800099c <lcd_print>
	  lcd_print(&hi2c1, ".");
 8000bc6:	491b      	ldr	r1, [pc, #108]	; (8000c34 <main+0x17c>)
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <main+0x160>)
 8000bca:	f7ff fee7 	bl	800099c <lcd_print>
	  lcd_print(&hi2c1, dec_temp);
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4811      	ldr	r0, [pc, #68]	; (8000c18 <main+0x160>)
 8000bd4:	f7ff fee2 	bl	800099c <lcd_print>
	  lcd_print(&hi2c1, "C");
 8000bd8:	4917      	ldr	r1, [pc, #92]	; (8000c38 <main+0x180>)
 8000bda:	480f      	ldr	r0, [pc, #60]	; (8000c18 <main+0x160>)
 8000bdc:	f7ff fede 	bl	800099c <lcd_print>

	  lcd_position(&hi2c1, 0, 1);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2100      	movs	r1, #0
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <main+0x160>)
 8000be6:	f7ff ff02 	bl	80009ee <lcd_position>
	  lcd_print(&hi2c1, "H: ");
 8000bea:	4914      	ldr	r1, [pc, #80]	; (8000c3c <main+0x184>)
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <main+0x160>)
 8000bee:	f7ff fed5 	bl	800099c <lcd_print>
	  lcd_print(&hi2c1, ent_hum);
 8000bf2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4807      	ldr	r0, [pc, #28]	; (8000c18 <main+0x160>)
 8000bfa:	f7ff fecf 	bl	800099c <lcd_print>
	  lcd_print(&hi2c1, "%");
 8000bfe:	4910      	ldr	r1, [pc, #64]	; (8000c40 <main+0x188>)
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <main+0x160>)
 8000c02:	f7ff fecb 	bl	800099c <lcd_print>

	  HAL_Delay(500);
 8000c06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c0a:	f000 fce7 	bl	80015dc <HAL_Delay>
	  lcd_position(&hi2c1, 13, 0);
 8000c0e:	e77c      	b.n	8000b0a <main+0x52>
 8000c10:	200000f4 	.word	0x200000f4
 8000c14:	200000e8 	.word	0x200000e8
 8000c18:	20000094 	.word	0x20000094
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	42c20000 	.word	0x42c20000
 8000c24:	08006408 	.word	0x08006408
 8000c28:	0800640c 	.word	0x0800640c
 8000c2c:	66666667 	.word	0x66666667
 8000c30:	08006410 	.word	0x08006410
 8000c34:	08006414 	.word	0x08006414
 8000c38:	08006418 	.word	0x08006418
 8000c3c:	0800641c 	.word	0x0800641c
 8000c40:	08006420 	.word	0x08006420

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b096      	sub	sp, #88	; 0x58
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2244      	movs	r2, #68	; 0x44
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 fbb6 	bl	80053c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c6a:	f001 ffbd 	bl	8002be8 <HAL_PWREx_ControlVoltageScaling>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c74:	f000 f85a 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c82:	2310      	movs	r3, #16
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c92:	230a      	movs	r3, #10
 8000c94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c96:	2307      	movs	r3, #7
 8000c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fff4 	bl	8002c94 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cb2:	f000 f83b 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fbbc 	bl	800344c <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cda:	f000 f827 	bl	8000d2c <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3758      	adds	r7, #88	; 0x58
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Routine interruption
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d10f      	bne.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  lcd_position(&hi2c1, 13, 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	210d      	movs	r1, #13
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cfe:	f7ff fe76 	bl	80009ee <lcd_position>
	  lcd_print(&hi2c1, boucle);
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d0a:	f7ff fe47 	bl	800099c <lcd_print>
	  boucle++;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d16:	6013      	str	r3, [r2, #0]
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000f4 	.word	0x200000f4
 8000d24:	20000094 	.word	0x20000094
 8000d28:	200000ec 	.word	0x200000ec

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>

08000d36 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)	// XOR
{
 8000d36:	b480      	push	{r7}
 8000d38:	b087      	sub	sp, #28
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	e020      	b.n	8000d8c <calculate_crc+0x56>
		crc ^= data[i];
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	4053      	eors	r3, r2
 8000d56:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e010      	b.n	8000d80 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da06      	bge.n	8000d74 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000d70:	75fb      	strb	r3, [r7, #23]
 8000d72:	e002      	b.n	8000d7a <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b07      	cmp	r3, #7
 8000d84:	d9eb      	bls.n	8000d5e <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d3da      	bcc.n	8000d4a <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	371c      	adds	r7, #28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af02      	add	r7, sp, #8
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	733b      	strb	r3, [r7, #12]
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	889b      	ldrh	r3, [r3, #4]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	231e      	movs	r3, #30
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f000 ff8a 	bl	8001cec <HAL_I2C_Master_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <sht3x_send_command+0x42>
	}

	return true;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af04      	add	r7, sp, #16
 8000e1e:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <sht3x_init+0x1e>
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <sht3x_init+0x74>)
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <sht3x_init+0x78>)
 8000e2e:	2138      	movs	r1, #56	; 0x38
 8000e30:	4818      	ldr	r0, [pc, #96]	; (8000e94 <sht3x_init+0x7c>)
 8000e32:	f004 fa53 	bl	80052dc <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	889b      	ldrh	r3, [r3, #4]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	b299      	uxth	r1, r3
 8000e42:	231e      	movs	r3, #30
 8000e44:	9302      	str	r3, [sp, #8]
 8000e46:	2303      	movs	r3, #3
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2302      	movs	r3, #2
 8000e52:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8000e56:	f001 f933 	bl	80020c0 <HAL_I2C_Mem_Read>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000e60:	2300      	movs	r3, #0
 8000e62:	e00e      	b.n	8000e82 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff63 	bl	8000d36 <calculate_crc>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d001      	beq.n	8000e80 <sht3x_init+0x68>
		return false;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e000      	b.n	8000e82 <sht3x_init+0x6a>
	}

	return true;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	08006424 	.word	0x08006424
 8000e90:	08006478 	.word	0x08006478
 8000e94:	08006464 	.word	0x08006464

08000e98 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8000ea4:	f642 4106 	movw	r1, #11270	; 0x2c06
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ff7a 	bl	8000da2 <sht3x_send_command>

	HAL_Delay(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 fb94 	bl	80015dc <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	889b      	ldrh	r3, [r3, #4]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	f107 0214 	add.w	r2, r7, #20
 8000ec4:	231e      	movs	r3, #30
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2306      	movs	r3, #6
 8000eca:	f001 f803 	bl	8001ed4 <HAL_I2C_Master_Receive>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e04f      	b.n	8000f78 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2102      	movs	r1, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff29 	bl	8000d36 <calculate_crc>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	3303      	adds	r3, #3
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff20 	bl	8000d36 <calculate_crc>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8000efa:	7dbb      	ldrb	r3, [r7, #22]
 8000efc:	7ffa      	ldrb	r2, [r7, #31]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d103      	bne.n	8000f0a <sht3x_read_temperature_and_humidity+0x72>
 8000f02:	7e7b      	ldrb	r3, [r7, #25]
 8000f04:	7fba      	ldrb	r2, [r7, #30]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d001      	beq.n	8000f0e <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e034      	b.n	8000f78 <sht3x_read_temperature_and_humidity+0xe0>
	}

	uint16_t temperature_raw = uint8_to_uint16(buffer[0], buffer[1]);
 8000f0e:	7d3b      	ldrb	r3, [r7, #20]
 8000f10:	7d7a      	ldrb	r2, [r7, #21]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff69 	bl	8000dec <uint8_to_uint16>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	7e3a      	ldrb	r2, [r7, #24]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff61 	bl	8000dec <uint8_to_uint16>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8000f2e:	8bbb      	ldrh	r3, [r7, #28]
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f38:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000f80 <sht3x_read_temperature_and_humidity+0xe8>
 8000f3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f40:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000f84 <sht3x_read_temperature_and_humidity+0xec>
 8000f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f48:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f88 <sht3x_read_temperature_and_humidity+0xf0>
 8000f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8000f56:	8b7b      	ldrh	r3, [r7, #26]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f60:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f8c <sht3x_read_temperature_and_humidity+0xf4>
 8000f64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f68:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000f84 <sht3x_read_temperature_and_humidity+0xec>
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	432f0000 	.word	0x432f0000
 8000f84:	477fff00 	.word	0x477fff00
 8000f88:	42340000 	.word	0x42340000
 8000f8c:	42c80000 	.word	0x42c80000

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 faba 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001032:	f003 f9b3 	bl	800439c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000f4 	.word	0x200000f4

08001040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return 1;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_kill>:

int _kill(int pid, int sig)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800105a:	f004 f95d 	bl	8005318 <__errno>
 800105e:	4603      	mov	r3, r0
 8001060:	2216      	movs	r2, #22
 8001062:	601a      	str	r2, [r3, #0]
  return -1;
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_exit>:

void _exit (int status)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe7 	bl	8001050 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001082:	e7fe      	b.n	8001082 <_exit+0x12>

08001084 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
  }

  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e009      	b.n	80010e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf1      	blt.n	80010d0 <_write+0x12>
  }
  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_close>:

int _close(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111e:	605a      	str	r2, [r3, #4]
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f004 f8c2 	bl	8005318 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20018000 	.word	0x20018000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200000f0 	.word	0x200000f0
 80011c8:	20000260 	.word	0x20000260

080011cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_TIM16_Init+0x48>)
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <MX_TIM16_Init+0x4c>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_TIM16_Init+0x48>)
 80011fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001200:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <MX_TIM16_Init+0x48>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_TIM16_Init+0x48>)
 800120a:	f242 7210 	movw	r2, #10000	; 0x2710
 800120e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_TIM16_Init+0x48>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_TIM16_Init+0x48>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_TIM16_Init+0x48>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_TIM16_Init+0x48>)
 8001224:	f002 fff2 	bl	800420c <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800122e:	f7ff fd7d 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000f4 	.word	0x200000f4
 800123c:	40014400 	.word	0x40014400

08001240 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_TIM_Base_MspInit+0x44>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d113      	bne.n	800127a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_TIM_Base_MspInit+0x48>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_TIM_Base_MspInit+0x48>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	6613      	str	r3, [r2, #96]	; 0x60
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_TIM_Base_MspInit+0x48>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2019      	movs	r0, #25
 8001270:	f000 fab3 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001274:	2019      	movs	r0, #25
 8001276:	f000 facc 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40014400 	.word	0x40014400
 8001288:	40021000 	.word	0x40021000

0800128c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <MX_USART1_UART_Init+0x5c>)
 8001294:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_USART1_UART_Init+0x58>)
 80012d2:	f003 fab1 	bl	8004838 <HAL_HalfDuplex_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80012dc:	f7ff fd26 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000140 	.word	0x20000140
 80012e8:	40013800 	.word	0x40013800

080012ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_USART2_UART_Init+0x58>)
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <MX_USART2_UART_Init+0x5c>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_USART2_UART_Init+0x58>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_USART2_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_USART2_UART_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_USART2_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_USART2_UART_Init+0x58>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_USART2_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_USART2_UART_Init+0x58>)
 8001330:	f003 fa34 	bl	800479c <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800133a:	f7ff fcf7 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001c4 	.word	0x200001c4
 8001348:	40004400 	.word	0x40004400

0800134c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0ae      	sub	sp, #184	; 0xb8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2288      	movs	r2, #136	; 0x88
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f004 f829 	bl	80053c4 <memset>
  if(uartHandle->Instance==USART1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a43      	ldr	r2, [pc, #268]	; (8001484 <HAL_UART_MspInit+0x138>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d13d      	bne.n	80013f8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800137c:	2301      	movs	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001380:	2300      	movs	r3, #0
 8001382:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fa83 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001394:	f7ff fcca 	bl	8000d2c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001398:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_UART_MspInit+0x13c>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139c:	4a3a      	ldr	r2, [pc, #232]	; (8001488 <HAL_UART_MspInit+0x13c>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a2:	6613      	str	r3, [r2, #96]	; 0x60
 80013a4:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_UART_MspInit+0x13c>)
 80013a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b35      	ldr	r3, [pc, #212]	; (8001488 <HAL_UART_MspInit+0x13c>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	4a34      	ldr	r2, [pc, #208]	; (8001488 <HAL_UART_MspInit+0x13c>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HAL_UART_MspInit+0x13c>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e2:	2307      	movs	r3, #7
 80013e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f000 fa29 	bl	8001848 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013f6:	e040      	b.n	800147a <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <HAL_UART_MspInit+0x140>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d13b      	bne.n	800147a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001402:	2302      	movs	r3, #2
 8001404:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001406:	2300      	movs	r3, #0
 8001408:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fa40 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800141a:	f7ff fc87 	bl	8000d2c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_UART_MspInit+0x13c>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_UART_MspInit+0x13c>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6593      	str	r3, [r2, #88]	; 0x58
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_UART_MspInit+0x13c>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_UART_MspInit+0x13c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_UART_MspInit+0x13c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_UART_MspInit+0x13c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800144e:	230c      	movs	r3, #12
 8001450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001466:	2307      	movs	r3, #7
 8001468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001470:	4619      	mov	r1, r3
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f000 f9e7 	bl	8001848 <HAL_GPIO_Init>
}
 800147a:	bf00      	nop
 800147c:	37b8      	adds	r7, #184	; 0xb8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40013800 	.word	0x40013800
 8001488:	40021000 	.word	0x40021000
 800148c:	40004400 	.word	0x40004400

08001490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001494:	f7ff fe9a 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <LoopForever+0x6>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <LoopForever+0xe>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <LoopForever+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014be:	f003 ff43 	bl	8005348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c2:	f7ff faf9 	bl	8000ab8 <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014d4:	080065d4 	.word	0x080065d4
  ldr r2, =_sbss
 80014d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014dc:	2000025c 	.word	0x2000025c

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_Init+0x3c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_Init+0x3c>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 f962 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001500:	2000      	movs	r0, #0
 8001502:	f000 f80f 	bl	8001524 <HAL_InitTick>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	e001      	b.n	8001516 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001512:	f7ff fd3d 	bl	8000f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001516:	79fb      	ldrb	r3, [r7, #7]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40022000 	.word	0x40022000

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_InitTick+0x6c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d023      	beq.n	8001580 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_InitTick+0x70>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_InitTick+0x6c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f96d 	bl	800182e <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10f      	bne.n	800157a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d809      	bhi.n	8001574 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 f937 	bl	80017da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <HAL_InitTick+0x74>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e007      	b.n	8001584 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e004      	b.n	8001584 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e001      	b.n	8001584 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000010 	.word	0x20000010
 8001594:	20000008 	.word	0x20000008
 8001598:	2000000c 	.word	0x2000000c

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000010 	.word	0x20000010
 80015c0:	20000248 	.word	0x20000248

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000248 	.word	0x20000248

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffde 	bl	80015c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000010 	.word	0x20000010

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff29 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff3e 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff31 	bl	8001688 <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa2 	bl	8001780 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001856:	e17f      	b.n	8001b58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8171 	beq.w	8001b52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d005      	beq.n	8001888 <HAL_GPIO_Init+0x40>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d130      	bne.n	80018ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	2203      	movs	r2, #3
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018be:	2201      	movs	r2, #1
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f003 0201 	and.w	r2, r3, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d118      	bne.n	8001928 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	6939      	ldr	r1, [r7, #16]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80ac 	beq.w	8001b52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_GPIO_Init+0x330>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	4a5e      	ldr	r2, [pc, #376]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6613      	str	r3, [r2, #96]	; 0x60
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a12:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x242>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <HAL_GPIO_Init+0x338>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x23e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_GPIO_Init+0x33c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_GPIO_Init+0x340>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x236>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x344>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x232>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_GPIO_Init+0x348>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x22e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_GPIO_Init+0x34c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x22a>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9c:	4937      	ldr	r1, [pc, #220]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ace:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b22:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f47f ae78 	bne.w	8001858 <HAL_GPIO_Init+0x10>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48001000 	.word	0x48001000
 8001b90:	48001400 	.word	0x48001400
 8001b94:	48001800 	.word	0x48001800
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e081      	b.n	8001ce2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7fe fd64 	bl	80006c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d104      	bne.n	8001c66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69d9      	ldr	r1, [r3, #28]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1a      	ldr	r2, [r3, #32]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	817b      	strh	r3, [r7, #10]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	f040 80da 	bne.w	8001ec2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_I2C_Master_Transmit+0x30>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e0d3      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d24:	f7ff fc4e 	bl	80015c4 <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2319      	movs	r3, #25
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fc5c 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0be      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2221      	movs	r2, #33	; 0x21
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2210      	movs	r2, #16
 8001d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2bff      	cmp	r3, #255	; 0xff
 8001d76:	d90e      	bls.n	8001d96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	22ff      	movs	r2, #255	; 0xff
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	8979      	ldrh	r1, [r7, #10]
 8001d86:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <HAL_I2C_Master_Transmit+0x1e0>)
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fe52 	bl	8002a38 <I2C_TransferConfig>
 8001d94:	e06c      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	8979      	ldrh	r1, [r7, #10]
 8001da8:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <HAL_I2C_Master_Transmit+0x1e0>)
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fe41 	bl	8002a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001db6:	e05b      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	6a39      	ldr	r1, [r7, #32]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fc59 	bl	8002674 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e07b      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d034      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d130      	bne.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	2200      	movs	r2, #0
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fbeb 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04d      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d90e      	bls.n	8001e50 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	8979      	ldrh	r1, [r7, #10]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fdf5 	bl	8002a38 <I2C_TransferConfig>
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	2300      	movs	r3, #0
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fde4 	bl	8002a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d19e      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fc38 	bl	80026f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e01a      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2220      	movs	r2, #32
 8001e94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001ea2:	400b      	ands	r3, r1
 8001ea4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ec2:	2302      	movs	r3, #2
  }
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	80002000 	.word	0x80002000
 8001ed0:	fe00e800 	.word	0xfe00e800

08001ed4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	817b      	strh	r3, [r7, #10]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	f040 80db 	bne.w	80020ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_I2C_Master_Receive+0x30>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0d4      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f0c:	f7ff fb5a 	bl	80015c4 <HAL_GetTick>
 8001f10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2319      	movs	r3, #25
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fb68 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0bf      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2222      	movs	r2, #34	; 0x22
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	893a      	ldrh	r2, [r7, #8]
 8001f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2bff      	cmp	r3, #255	; 0xff
 8001f5e:	d90e      	bls.n	8001f7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	22ff      	movs	r2, #255	; 0xff
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_I2C_Master_Receive+0x1e4>)
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fd5e 	bl	8002a38 <I2C_TransferConfig>
 8001f7c:	e06d      	b.n	800205a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	8979      	ldrh	r1, [r7, #10]
 8001f90:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_I2C_Master_Receive+0x1e4>)
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fd4d 	bl	8002a38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f9e:	e05c      	b.n	800205a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	6a39      	ldr	r1, [r7, #32]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fbe1 	bl	800276c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e07c      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d034      	beq.n	800205a <HAL_I2C_Master_Receive+0x186>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d130      	bne.n	800205a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 faf6 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e04d      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2bff      	cmp	r3, #255	; 0xff
 800201a:	d90e      	bls.n	800203a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	22ff      	movs	r2, #255	; 0xff
 8002020:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	b2da      	uxtb	r2, r3
 8002028:	8979      	ldrh	r1, [r7, #10]
 800202a:	2300      	movs	r3, #0
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fd00 	bl	8002a38 <I2C_TransferConfig>
 8002038:	e00f      	b.n	800205a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	b2da      	uxtb	r2, r3
 800204a:	8979      	ldrh	r1, [r7, #10]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fcef 	bl	8002a38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d19d      	bne.n	8001fa0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	6a39      	ldr	r1, [r7, #32]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fb43 	bl	80026f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e01a      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2220      	movs	r2, #32
 800207e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_I2C_Master_Receive+0x1e8>)
 800208c:	400b      	ands	r3, r1
 800208e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	80002400 	.word	0x80002400
 80020bc:	fe00e800 	.word	0xfe00e800

080020c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	817b      	strh	r3, [r7, #10]
 80020d2:	460b      	mov	r3, r1
 80020d4:	813b      	strh	r3, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	f040 80fd 	bne.w	80022e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_I2C_Mem_Read+0x34>
 80020ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0f1      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_I2C_Mem_Read+0x4e>
 800210a:	2302      	movs	r3, #2
 800210c:	e0ea      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002116:	f7ff fa55 	bl	80015c4 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2319      	movs	r3, #25
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fa63 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0d5      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2222      	movs	r2, #34	; 0x22
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a3a      	ldr	r2, [r7, #32]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002160:	88f8      	ldrh	r0, [r7, #6]
 8002162:	893a      	ldrh	r2, [r7, #8]
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4603      	mov	r3, r0
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f9c7 	bl	8002504 <I2C_RequestMemoryRead>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0ad      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d90e      	bls.n	80021b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	22ff      	movs	r2, #255	; 0xff
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	4b52      	ldr	r3, [pc, #328]	; (80022ec <HAL_I2C_Mem_Read+0x22c>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fc45 	bl	8002a38 <I2C_TransferConfig>
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_I2C_Mem_Read+0x22c>)
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fc34 	bl	8002a38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	2200      	movs	r2, #0
 80021d8:	2104      	movs	r1, #4
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fa0a 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07c      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d034      	beq.n	8002290 <HAL_I2C_Mem_Read+0x1d0>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d130      	bne.n	8002290 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	2200      	movs	r2, #0
 8002236:	2180      	movs	r1, #128	; 0x80
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f9db 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e04d      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	2bff      	cmp	r3, #255	; 0xff
 8002250:	d90e      	bls.n	8002270 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	b2da      	uxtb	r2, r3
 800225e:	8979      	ldrh	r1, [r7, #10]
 8002260:	2300      	movs	r3, #0
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fbe5 	bl	8002a38 <I2C_TransferConfig>
 800226e:	e00f      	b.n	8002290 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	b2da      	uxtb	r2, r3
 8002280:	8979      	ldrh	r1, [r7, #10]
 8002282:	2300      	movs	r3, #0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fbd4 	bl	8002a38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d19a      	bne.n	80021d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fa28 	bl	80026f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e01a      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2220      	movs	r2, #32
 80022b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_I2C_Mem_Read+0x230>)
 80022c2:	400b      	ands	r3, r1
 80022c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	80002400 	.word	0x80002400
 80022f0:	fe00e800 	.word	0xfe00e800

080022f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b20      	cmp	r3, #32
 8002312:	f040 80f1 	bne.w	80024f8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002324:	d101      	bne.n	800232a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
 8002328:	e0e7      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_I2C_IsDeviceReady+0x44>
 8002334:	2302      	movs	r3, #2
 8002336:	e0e0      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2224      	movs	r2, #36	; 0x24
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_I2C_IsDeviceReady+0x72>
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002364:	e004      	b.n	8002370 <HAL_I2C_IsDeviceReady+0x7c>
 8002366:	897b      	ldrh	r3, [r7, #10]
 8002368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002376:	f7ff f925 	bl	80015c4 <HAL_GetTick>
 800237a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b20      	cmp	r3, #32
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	2b10      	cmp	r3, #16
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023a8:	e034      	b.n	8002414 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d01a      	beq.n	80023e8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7ff f907 	bl	80015c4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <HAL_I2C_IsDeviceReady+0xd4>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10f      	bne.n	80023e8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e088      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b10      	cmp	r3, #16
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_I2C_IsDeviceReady+0x12c>
 800241a:	7fbb      	ldrb	r3, [r7, #30]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0c4      	beq.n	80023aa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b10      	cmp	r3, #16
 800242c:	d01a      	beq.n	8002464 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	2120      	movs	r1, #32
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f8db 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e058      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2220      	movs	r2, #32
 800244e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e04a      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	2120      	movs	r1, #32
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f8c0 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e03d      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2210      	movs	r2, #16
 8002484:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2220      	movs	r2, #32
 800248c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d118      	bne.n	80024c8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2120      	movs	r1, #32
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f89f 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e01c      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2220      	movs	r2, #32
 80024c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3301      	adds	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	f63f af3b 	bhi.w	800234e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	817b      	strh	r3, [r7, #10]
 8002516:	460b      	mov	r3, r1
 8002518:	813b      	strh	r3, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	8979      	ldrh	r1, [r7, #10]
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <I2C_RequestMemoryRead+0xa4>)
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2300      	movs	r3, #0
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa84 	bl	8002a38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f89d 	bl	8002674 <I2C_WaitOnTXISFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e02c      	b.n	800259e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800254a:	893b      	ldrh	r3, [r7, #8]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
 8002554:	e015      	b.n	8002582 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002556:	893b      	ldrh	r3, [r7, #8]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	b29b      	uxth	r3, r3
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	69b9      	ldr	r1, [r7, #24]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f883 	bl	8002674 <I2C_WaitOnTXISFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e012      	b.n	800259e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002578:	893b      	ldrh	r3, [r7, #8]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2200      	movs	r2, #0
 800258a:	2140      	movs	r1, #64	; 0x40
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f831 	bl	80025f4 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	80002000 	.word	0x80002000

080025ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d103      	bne.n	80025ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d007      	beq.n	80025e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	619a      	str	r2, [r3, #24]
  }
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002604:	e022      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d01e      	beq.n	800264c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7fe ffd9 	bl	80015c4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d113      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e00f      	b.n	800266c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	429a      	cmp	r2, r3
 8002668:	d0cd      	beq.n	8002606 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002680:	e02c      	b.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f8ea 	bl	8002860 <I2C_IsErrorOccurred>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e02a      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d01e      	beq.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7fe ff91 	bl	80015c4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d113      	bne.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d1cb      	bne.n	8002682 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002700:	e028      	b.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f8aa 	bl	8002860 <I2C_IsErrorOccurred>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e026      	b.n	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002716:	f7fe ff55 	bl	80015c4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d113      	bne.n	8002754 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b20      	cmp	r3, #32
 8002760:	d1cf      	bne.n	8002702 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002778:	e064      	b.n	8002844 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f86e 	bl	8002860 <I2C_IsErrorOccurred>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e062      	b.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b20      	cmp	r3, #32
 800279a:	d138      	bne.n	800280e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d105      	bne.n	80027b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e04e      	b.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d107      	bne.n	80027d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2210      	movs	r2, #16
 80027ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2204      	movs	r2, #4
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
 80027d2:	e002      	b.n	80027da <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2220      	movs	r2, #32
 80027e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80027ee:	400b      	ands	r3, r1
 80027f0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e022      	b.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7fe fed9 	bl	80015c4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10f      	bne.n	8002844 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e007      	b.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b04      	cmp	r3, #4
 8002850:	d193      	bne.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	fe00e800 	.word	0xfe00e800

08002860 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d075      	beq.n	8002978 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2210      	movs	r2, #16
 8002892:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002894:	e056      	b.n	8002944 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d052      	beq.n	8002944 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe fe91 	bl	80015c4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_IsErrorOccurred+0x54>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d147      	bne.n	8002944 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d6:	d12e      	bne.n	8002936 <I2C_IsErrorOccurred+0xd6>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028de:	d02a      	beq.n	8002936 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d027      	beq.n	8002936 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028f6:	f7fe fe65 	bl	80015c4 <HAL_GetTick>
 80028fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028fc:	e01b      	b.n	8002936 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028fe:	f7fe fe61 	bl	80015c4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b19      	cmp	r3, #25
 800290a:	d914      	bls.n	8002936 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b20      	cmp	r3, #32
 8002942:	d1dc      	bne.n	80028fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d003      	beq.n	800295a <I2C_IsErrorOccurred+0xfa>
 8002952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002956:	2b00      	cmp	r3, #0
 8002958:	d09d      	beq.n	8002896 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800295a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2220      	movs	r2, #32
 8002968:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01c      	beq.n	8002a28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fddc 	bl	80025ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <I2C_IsErrorOccurred+0x1d4>)
 8002a00:	400b      	ands	r3, r1
 8002a02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	fe00e800 	.word	0xfe00e800

08002a38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	4613      	mov	r3, r2
 8002a48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a4a:	897b      	ldrh	r3, [r7, #10]
 8002a4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a50:	7a7b      	ldrb	r3, [r7, #9]
 8002a52:	041b      	lsls	r3, r3, #16
 8002a54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	0d5b      	lsrs	r3, r3, #21
 8002a72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <I2C_TransferConfig+0x60>)
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	ea02 0103 	and.w	r1, r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	03ff63ff 	.word	0x03ff63ff

08002a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d138      	bne.n	8002b24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e032      	b.n	8002b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	; 0x24
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d139      	bne.n	8002bbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e033      	b.n	8002bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2224      	movs	r2, #36	; 0x24
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40007000 	.word	0x40007000

08002be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf6:	d130      	bne.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c04:	d038      	beq.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2232      	movs	r2, #50	; 0x32
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0c9b      	lsrs	r3, r3, #18
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c2c:	e002      	b.n	8002c34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c40:	d102      	bne.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f2      	bne.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c54:	d110      	bne.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e00f      	b.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d007      	beq.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	431bde83 	.word	0x431bde83

08002c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e3ca      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca6:	4b97      	ldr	r3, [pc, #604]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb0:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80e4 	beq.w	8002e90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <HAL_RCC_OscConfig+0x4a>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	f040 808b 	bne.w	8002dec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	f040 8087 	bne.w	8002dec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cde:	4b89      	ldr	r3, [pc, #548]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x62>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e3a2      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1a      	ldr	r2, [r3, #32]
 8002cfa:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_RCC_OscConfig+0x7c>
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0e:	e005      	b.n	8002d1c <HAL_RCC_OscConfig+0x88>
 8002d10:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d223      	bcs.n	8002d68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fd55 	bl	80037d4 <RCC_SetFlashLatencyFromMSIRange>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e383      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d34:	4b73      	ldr	r3, [pc, #460]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a72      	ldr	r2, [pc, #456]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	f043 0308 	orr.w	r3, r3, #8
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	496d      	ldr	r1, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d52:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	4968      	ldr	r1, [pc, #416]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
 8002d66:	e025      	b.n	8002db4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d68:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	f043 0308 	orr.w	r3, r3, #8
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4960      	ldr	r1, [pc, #384]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d86:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	495b      	ldr	r1, [pc, #364]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fd15 	bl	80037d4 <RCC_SetFlashLatencyFromMSIRange>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e343      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002db4:	f000 fc4a 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	4950      	ldr	r1, [pc, #320]	; (8002f08 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd0:	4a4e      	ldr	r2, [pc, #312]	; (8002f0c <HAL_RCC_OscConfig+0x278>)
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dd4:	4b4e      	ldr	r3, [pc, #312]	; (8002f10 <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fba3 	bl	8001524 <HAL_InitTick>
 8002dde:	4603      	mov	r3, r0
 8002de0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d052      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	e327      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d032      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a42      	ldr	r2, [pc, #264]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fbe0 	bl	80015c4 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e08:	f7fe fbdc 	bl	80015c4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e310      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a36      	ldr	r2, [pc, #216]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	f043 0308 	orr.w	r3, r3, #8
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4931      	ldr	r1, [pc, #196]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	492c      	ldr	r1, [pc, #176]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
 8002e58:	e01a      	b.n	8002e90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a29      	ldr	r2, [pc, #164]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fbad 	bl	80015c4 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fba9 	bl	80015c4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e2dd      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x1da>
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d074      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x21a>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d10b      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d064      	beq.n	8002f84 <HAL_RCC_OscConfig+0x2f0>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d160      	bne.n	8002f84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e2ba      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x24a>
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e026      	b.n	8002f2c <HAL_RCC_OscConfig+0x298>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee6:	d115      	bne.n	8002f14 <HAL_RCC_OscConfig+0x280>
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a02      	ldr	r2, [pc, #8]	; (8002f04 <HAL_RCC_OscConfig+0x270>)
 8002efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e014      	b.n	8002f2c <HAL_RCC_OscConfig+0x298>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08006484 	.word	0x08006484
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	2000000c 	.word	0x2000000c
 8002f14:	4ba0      	ldr	r3, [pc, #640]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a9f      	ldr	r2, [pc, #636]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b9d      	ldr	r3, [pc, #628]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a9c      	ldr	r2, [pc, #624]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fb46 	bl	80015c4 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fb42 	bl	80015c4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e276      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4e:	4b92      	ldr	r3, [pc, #584]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x2a8>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fb32 	bl	80015c4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fb2e 	bl	80015c4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e262      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x2d0>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d060      	beq.n	8003054 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x310>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d116      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa4:	4b7c      	ldr	r3, [pc, #496]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_OscConfig+0x328>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e23f      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	4973      	ldr	r1, [pc, #460]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd0:	e040      	b.n	8003054 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d023      	beq.n	8003022 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fda:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe faed 	bl	80015c4 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe fae9 	bl	80015c4 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e21d      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003000:	4b65      	ldr	r3, [pc, #404]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b62      	ldr	r3, [pc, #392]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	495f      	ldr	r1, [pc, #380]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
 8003020:	e018      	b.n	8003054 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b5d      	ldr	r3, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe fac9 	bl	80015c4 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe fac5 	bl	80015c4 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1f9      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d03c      	beq.n	80030da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 800306a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306e:	4a4a      	ldr	r2, [pc, #296]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fe faa4 	bl	80015c4 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe faa0 	bl	80015c4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1d4      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ef      	beq.n	8003080 <HAL_RCC_OscConfig+0x3ec>
 80030a0:	e01b      	b.n	80030da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a2:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe fa87 	bl	80015c4 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ba:	f7fe fa83 	bl	80015c4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1b7      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 80030ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ef      	bne.n	80030ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80a6 	beq.w	8003234 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	4a26      	ldr	r2, [pc, #152]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	; 0x58
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003110:	2301      	movs	r3, #1
 8003112:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <HAL_RCC_OscConfig+0x508>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d118      	bne.n	8003152 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_RCC_OscConfig+0x508>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_RCC_OscConfig+0x508>)
 8003126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312c:	f7fe fa4a 	bl	80015c4 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003134:	f7fe fa46 	bl	80015c4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e17a      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_RCC_OscConfig+0x508>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d108      	bne.n	800316c <HAL_RCC_OscConfig+0x4d8>
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800316a:	e029      	b.n	80031c0 <HAL_RCC_OscConfig+0x52c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b05      	cmp	r3, #5
 8003172:	d115      	bne.n	80031a0 <HAL_RCC_OscConfig+0x50c>
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a03      	ldr	r2, [pc, #12]	; (8003198 <HAL_RCC_OscConfig+0x504>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003194:	e014      	b.n	80031c0 <HAL_RCC_OscConfig+0x52c>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	4b9c      	ldr	r3, [pc, #624]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	4a9b      	ldr	r2, [pc, #620]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b0:	4b98      	ldr	r3, [pc, #608]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a97      	ldr	r2, [pc, #604]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d016      	beq.n	80031f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fe f9fc 	bl	80015c4 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe f9f8 	bl	80015c4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e12a      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e6:	4b8b      	ldr	r3, [pc, #556]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ed      	beq.n	80031d0 <HAL_RCC_OscConfig+0x53c>
 80031f4:	e015      	b.n	8003222 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f6:	f7fe f9e5 	bl	80015c4 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031fc:	e00a      	b.n	8003214 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fe:	f7fe f9e1 	bl	80015c4 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f241 3288 	movw	r2, #5000	; 0x1388
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e113      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003214:	4b7f      	ldr	r3, [pc, #508]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ed      	bne.n	80031fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003222:	7ffb      	ldrb	r3, [r7, #31]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003228:	4b7a      	ldr	r3, [pc, #488]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	4a79      	ldr	r2, [pc, #484]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003232:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80fe 	beq.w	800343a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	2b02      	cmp	r3, #2
 8003244:	f040 80d0 	bne.w	80033e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003248:	4b72      	ldr	r3, [pc, #456]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	429a      	cmp	r2, r3
 800325a:	d130      	bne.n	80032be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	3b01      	subs	r3, #1
 8003268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d127      	bne.n	80032be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d11f      	bne.n	80032be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003288:	2a07      	cmp	r2, #7
 800328a:	bf14      	ite	ne
 800328c:	2201      	movne	r2, #1
 800328e:	2200      	moveq	r2, #0
 8003290:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003292:	4293      	cmp	r3, r2
 8003294:	d113      	bne.n	80032be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d109      	bne.n	80032be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d06e      	beq.n	800339c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d069      	beq.n	8003398 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032c4:	4b53      	ldr	r3, [pc, #332]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0ad      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032e0:	4b4c      	ldr	r3, [pc, #304]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80032e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ec:	f7fe f96a 	bl	80015c4 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fe f966 	bl	80015c4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e09a      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003306:	4b43      	ldr	r3, [pc, #268]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003312:	4b40      	ldr	r3, [pc, #256]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	4b40      	ldr	r3, [pc, #256]	; (8003418 <HAL_RCC_OscConfig+0x784>)
 8003318:	4013      	ands	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003322:	3a01      	subs	r2, #1
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800332c:	0212      	lsls	r2, r2, #8
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003334:	0852      	lsrs	r2, r2, #1
 8003336:	3a01      	subs	r2, #1
 8003338:	0552      	lsls	r2, r2, #21
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003340:	0852      	lsrs	r2, r2, #1
 8003342:	3a01      	subs	r2, #1
 8003344:	0652      	lsls	r2, r2, #25
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800334c:	0912      	lsrs	r2, r2, #4
 800334e:	0452      	lsls	r2, r2, #17
 8003350:	430a      	orrs	r2, r1
 8003352:	4930      	ldr	r1, [pc, #192]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 8003354:	4313      	orrs	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003358:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800336a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003370:	f7fe f928 	bl	80015c4 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe f924 	bl	80015c4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e058      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003396:	e050      	b.n	800343a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e04f      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339c:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d148      	bne.n	800343a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033a8:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80033ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033c0:	f7fe f900 	bl	80015c4 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe f8fc 	bl	80015c4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e030      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x734>
 80033e6:	e028      	b.n	800343a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b0c      	cmp	r3, #12
 80033ec:	d023      	beq.n	8003436 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a08      	ldr	r2, [pc, #32]	; (8003414 <HAL_RCC_OscConfig+0x780>)
 80033f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe f8e3 	bl	80015c4 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	e00c      	b.n	800341c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe f8df 	bl	80015c4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d905      	bls.n	800341c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e013      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
 8003414:	40021000 	.word	0x40021000
 8003418:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x7b0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ec      	bne.n	8003402 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_OscConfig+0x7b0>)
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	4905      	ldr	r1, [pc, #20]	; (8003444 <HAL_RCC_OscConfig+0x7b0>)
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_OscConfig+0x7b4>)
 8003430:	4013      	ands	r3, r2
 8003432:	60cb      	str	r3, [r1, #12]
 8003434:	e001      	b.n	800343a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	feeefffc 	.word	0xfeeefffc

0800344c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0e7      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003460:	4b75      	ldr	r3, [pc, #468]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d910      	bls.n	8003490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b72      	ldr	r3, [pc, #456]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 0207 	bic.w	r2, r3, #7
 8003476:	4970      	ldr	r1, [pc, #448]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0cf      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d908      	bls.n	80034be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ac:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4960      	ldr	r1, [pc, #384]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d04c      	beq.n	8003564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	4b5a      	ldr	r3, [pc, #360]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d121      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0a6      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ea:	4b54      	ldr	r3, [pc, #336]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d115      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e09a      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003502:	4b4e      	ldr	r3, [pc, #312]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e08e      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003512:	4b4a      	ldr	r3, [pc, #296]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e086      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003522:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 0203 	bic.w	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	4943      	ldr	r1, [pc, #268]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fe f846 	bl	80015c4 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	e00a      	b.n	8003552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353c:	f7fe f842 	bl	80015c4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e06e      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 020c 	and.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	429a      	cmp	r2, r3
 8003562:	d1eb      	bne.n	800353c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357c:	429a      	cmp	r2, r3
 800357e:	d208      	bcs.n	8003592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b2e      	ldr	r3, [pc, #184]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	492b      	ldr	r1, [pc, #172]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d210      	bcs.n	80035c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 0207 	bic.w	r2, r3, #7
 80035a8:	4923      	ldr	r1, [pc, #140]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCC_ClockConfig+0x1ec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e036      	b.n	8003630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4918      	ldr	r1, [pc, #96]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4910      	ldr	r1, [pc, #64]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003600:	f000 f824 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	490b      	ldr	r1, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x1f4>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1f8>)
 800361e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1fc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd ff7d 	bl	8001524 <HAL_InitTick>
 800362a:	4603      	mov	r3, r0
 800362c:	72fb      	strb	r3, [r7, #11]

  return status;
 800362e:	7afb      	ldrb	r3, [r7, #11]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40022000 	.word	0x40022000
 800363c:	40021000 	.word	0x40021000
 8003640:	08006484 	.word	0x08006484
 8003644:	20000008 	.word	0x20000008
 8003648:	2000000c 	.word	0x2000000c

0800364c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x34>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d121      	bne.n	80036be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d11e      	bne.n	80036be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003680:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	e005      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036a8:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10d      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d102      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_GetSysClockFreq+0x110>)
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	e004      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_RCC_GetSysClockFreq+0x114>)
 80036d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b0c      	cmp	r3, #12
 80036d8:	d134      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0xac>
 80036f0:	e005      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCC_GetSysClockFreq+0x110>)
 80036f4:	617b      	str	r3, [r7, #20]
      break;
 80036f6:	e005      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_GetSysClockFreq+0x114>)
 80036fa:	617b      	str	r3, [r7, #20]
      break;
 80036fc:	e002      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	617b      	str	r3, [r7, #20]
      break;
 8003702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	3301      	adds	r3, #1
 8003710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	fb03 f202 	mul.w	r2, r3, r2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_RCC_GetSysClockFreq+0x108>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	0e5b      	lsrs	r3, r3, #25
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	3301      	adds	r3, #1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003744:	69bb      	ldr	r3, [r7, #24]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	0800649c 	.word	0x0800649c
 800375c:	00f42400 	.word	0x00f42400
 8003760:	007a1200 	.word	0x007a1200

08003764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_RCC_GetHCLKFreq+0x14>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000008 	.word	0x20000008

0800377c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003780:	f7ff fff0 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4904      	ldr	r1, [pc, #16]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08006494 	.word	0x08006494

080037a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037ac:	f7ff ffda 	bl	8003764 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0adb      	lsrs	r3, r3, #11
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4904      	ldr	r1, [pc, #16]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08006494 	.word	0x08006494

080037d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037ec:	f7ff f9ee 	bl	8002bcc <HAL_PWREx_GetVoltageRange>
 80037f0:	6178      	str	r0, [r7, #20]
 80037f2:	e014      	b.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b25      	ldr	r3, [pc, #148]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4a24      	ldr	r2, [pc, #144]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800380c:	f7ff f9de 	bl	8002bcc <HAL_PWREx_GetVoltageRange>
 8003810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	4a1d      	ldr	r2, [pc, #116]	; (800388c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003824:	d10b      	bne.n	800383e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b80      	cmp	r3, #128	; 0x80
 800382a:	d919      	bls.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2ba0      	cmp	r3, #160	; 0xa0
 8003830:	d902      	bls.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003832:	2302      	movs	r3, #2
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e013      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003838:	2301      	movs	r3, #1
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	e010      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d902      	bls.n	800384a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003844:	2303      	movs	r3, #3
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e00a      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d102      	bne.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003850:	2302      	movs	r3, #2
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e004      	b.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b70      	cmp	r3, #112	; 0x70
 800385a:	d101      	bne.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800385c:	2301      	movs	r3, #1
 800385e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0207 	bic.w	r2, r3, #7
 8003868:	4909      	ldr	r1, [pc, #36]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	40022000 	.word	0x40022000

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800389c:	2300      	movs	r3, #0
 800389e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038a0:	2300      	movs	r3, #0
 80038a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d041      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b8:	d02a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038be:	d824      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ca:	d81e      	bhi.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d4:	d010      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038d6:	e018      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038d8:	4b86      	ldr	r3, [pc, #536]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a85      	ldr	r2, [pc, #532]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038e4:	e015      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fabb 	bl	8003e68 <RCCEx_PLLSAI1_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f6:	e00c      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3320      	adds	r3, #32
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fba6 	bl	8004050 <RCCEx_PLLSAI2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003908:	e003      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	74fb      	strb	r3, [r7, #19]
      break;
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003926:	4973      	ldr	r1, [pc, #460]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800392e:	e001      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d041      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003944:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003948:	d02a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800394a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800394e:	d824      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003954:	d008      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800395a:	d81e      	bhi.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003964:	d010      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003966:	e018      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003968:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a61      	ldr	r2, [pc, #388]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003972:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003974:	e015      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fa73 	bl	8003e68 <RCCEx_PLLSAI1_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003986:	e00c      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3320      	adds	r3, #32
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fb5e 	bl	8004050 <RCCEx_PLLSAI2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	74fb      	strb	r3, [r7, #19]
      break;
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039a8:	4b52      	ldr	r3, [pc, #328]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b6:	494f      	ldr	r1, [pc, #316]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039be:	e001      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80a0 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039d6:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ec:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	4a40      	ldr	r2, [pc, #256]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6593      	str	r3, [r2, #88]	; 0x58
 80039f8:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a08:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3a      	ldr	r2, [pc, #232]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a14:	f7fd fdd6 	bl	80015c4 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a1a:	e009      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fd fdd2 	bl	80015c4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a2e:	e005      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a30:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ef      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d15c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a42:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01f      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d019      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a6c:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fd91 	bl	80015c4 <HAL_GetTick>
 8003aa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa4:	e00b      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fd fd8d 	bl	80015c4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d902      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	74fb      	strb	r3, [r7, #19]
            break;
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ec      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	4904      	ldr	r1, [pc, #16]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aea:	e009      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b00:	7c7b      	ldrb	r3, [r7, #17]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4b9e      	ldr	r3, [pc, #632]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	4a9d      	ldr	r2, [pc, #628]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b1e:	4b98      	ldr	r3, [pc, #608]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f023 0203 	bic.w	r2, r3, #3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	4994      	ldr	r1, [pc, #592]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b40:	4b8f      	ldr	r3, [pc, #572]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f023 020c 	bic.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	498c      	ldr	r1, [pc, #560]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b62:	4b87      	ldr	r3, [pc, #540]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	4983      	ldr	r1, [pc, #524]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b84:	4b7e      	ldr	r3, [pc, #504]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	497b      	ldr	r1, [pc, #492]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	4972      	ldr	r1, [pc, #456]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bc8:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	496a      	ldr	r1, [pc, #424]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bea:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	4961      	ldr	r1, [pc, #388]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c0c:	4b5c      	ldr	r3, [pc, #368]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1a:	4959      	ldr	r1, [pc, #356]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2e:	4b54      	ldr	r3, [pc, #336]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	4950      	ldr	r1, [pc, #320]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c50:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	4948      	ldr	r1, [pc, #288]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c72:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	493f      	ldr	r1, [pc, #252]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d028      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c94:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca2:	4937      	ldr	r1, [pc, #220]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a31      	ldr	r2, [pc, #196]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cbe:	60d3      	str	r3, [r2, #12]
 8003cc0:	e011      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f8c8 	bl	8003e68 <RCCEx_PLLSAI1_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	491f      	ldr	r1, [pc, #124]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d10:	d106      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d1c:	60d3      	str	r3, [r2, #12]
 8003d1e:	e011      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 f899 	bl	8003e68 <RCCEx_PLLSAI1_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d40:	7cfb      	ldrb	r3, [r7, #19]
 8003d42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02b      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	4908      	ldr	r1, [pc, #32]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6e:	d109      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a02      	ldr	r2, [pc, #8]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7a:	60d3      	str	r3, [r2, #12]
 8003d7c:	e014      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3304      	adds	r3, #4
 8003d92:	2101      	movs	r1, #1
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f867 	bl	8003e68 <RCCEx_PLLSAI1_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d9e:	7cfb      	ldrb	r3, [r7, #19]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d02f      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc2:	4928      	ldr	r1, [pc, #160]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dd2:	d10d      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	2102      	movs	r1, #2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f844 	bl	8003e68 <RCCEx_PLLSAI1_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003de4:	7cfb      	ldrb	r3, [r7, #19]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d014      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	74bb      	strb	r3, [r7, #18]
 8003dee:	e011      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3320      	adds	r3, #32
 8003dfe:	2102      	movs	r1, #2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 f925 	bl	8004050 <RCCEx_PLLSAI2_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e10:	7cfb      	ldrb	r3, [r7, #19]
 8003e12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2e:	490d      	ldr	r1, [pc, #52]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e52:	4904      	ldr	r1, [pc, #16]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40021000 	.word	0x40021000

08003e68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e76:	4b75      	ldr	r3, [pc, #468]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d018      	beq.n	8003eb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e82:	4b72      	ldr	r3, [pc, #456]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0203 	and.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d10d      	bne.n	8003eae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
       ||
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e9a:	4b6c      	ldr	r3, [pc, #432]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d047      	beq.n	8003f3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e044      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d018      	beq.n	8003eee <RCCEx_PLLSAI1_Config+0x86>
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d825      	bhi.n	8003f0c <RCCEx_PLLSAI1_Config+0xa4>
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d002      	beq.n	8003eca <RCCEx_PLLSAI1_Config+0x62>
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d009      	beq.n	8003edc <RCCEx_PLLSAI1_Config+0x74>
 8003ec8:	e020      	b.n	8003f0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eca:	4b60      	ldr	r3, [pc, #384]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11d      	bne.n	8003f12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eda:	e01a      	b.n	8003f12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003edc:	4b5b      	ldr	r3, [pc, #364]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d116      	bne.n	8003f16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eec:	e013      	b.n	8003f16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eee:	4b57      	ldr	r3, [pc, #348]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003efa:	4b54      	ldr	r3, [pc, #336]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f0a:	e006      	b.n	8003f1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f10:	e004      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f22:	4b4a      	ldr	r3, [pc, #296]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	430b      	orrs	r3, r1
 8003f38:	4944      	ldr	r1, [pc, #272]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d17d      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f44:	4b41      	ldr	r3, [pc, #260]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a40      	ldr	r2, [pc, #256]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f50:	f7fd fb38 	bl	80015c4 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f56:	e009      	b.n	8003f6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f58:	f7fd fb34 	bl	80015c4 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d902      	bls.n	8003f6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	73fb      	strb	r3, [r7, #15]
        break;
 8003f6a:	e005      	b.n	8003f78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f6c:	4b37      	ldr	r3, [pc, #220]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1ef      	bne.n	8003f58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d160      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d111      	bne.n	8003fa8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f84:	4b31      	ldr	r3, [pc, #196]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6892      	ldr	r2, [r2, #8]
 8003f94:	0211      	lsls	r1, r2, #8
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68d2      	ldr	r2, [r2, #12]
 8003f9a:	0912      	lsrs	r2, r2, #4
 8003f9c:	0452      	lsls	r2, r2, #17
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	492a      	ldr	r1, [pc, #168]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
 8003fa6:	e027      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d112      	bne.n	8003fd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6892      	ldr	r2, [r2, #8]
 8003fbe:	0211      	lsls	r1, r2, #8
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6912      	ldr	r2, [r2, #16]
 8003fc4:	0852      	lsrs	r2, r2, #1
 8003fc6:	3a01      	subs	r2, #1
 8003fc8:	0552      	lsls	r2, r2, #21
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	491f      	ldr	r1, [pc, #124]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	610b      	str	r3, [r1, #16]
 8003fd2:	e011      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6892      	ldr	r2, [r2, #8]
 8003fe4:	0211      	lsls	r1, r2, #8
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6952      	ldr	r2, [r2, #20]
 8003fea:	0852      	lsrs	r2, r2, #1
 8003fec:	3a01      	subs	r2, #1
 8003fee:	0652      	lsls	r2, r2, #25
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	4916      	ldr	r1, [pc, #88]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a13      	ldr	r2, [pc, #76]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fd fade 	bl	80015c4 <HAL_GetTick>
 8004008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800400a:	e009      	b.n	8004020 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800400c:	f7fd fada 	bl	80015c4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d902      	bls.n	8004020 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	73fb      	strb	r3, [r7, #15]
          break;
 800401e:	e005      	b.n	800402c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ef      	beq.n	800400c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	4904      	ldr	r1, [pc, #16]	; (800404c <RCCEx_PLLSAI1_Config+0x1e4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000

08004050 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800405e:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d018      	beq.n	800409c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800406a:	4b67      	ldr	r3, [pc, #412]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0203 	and.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d10d      	bne.n	8004096 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
       ||
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004082:	4b61      	ldr	r3, [pc, #388]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
       ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d047      	beq.n	8004126 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e044      	b.n	8004126 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d018      	beq.n	80040d6 <RCCEx_PLLSAI2_Config+0x86>
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d825      	bhi.n	80040f4 <RCCEx_PLLSAI2_Config+0xa4>
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d002      	beq.n	80040b2 <RCCEx_PLLSAI2_Config+0x62>
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d009      	beq.n	80040c4 <RCCEx_PLLSAI2_Config+0x74>
 80040b0:	e020      	b.n	80040f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b2:	4b55      	ldr	r3, [pc, #340]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d11d      	bne.n	80040fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c2:	e01a      	b.n	80040fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d4:	e013      	b.n	80040fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040d6:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040e2:	4b49      	ldr	r3, [pc, #292]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040f2:	e006      	b.n	8004102 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      break;
 80040f8:	e004      	b.n	8004104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004102:	bf00      	nop
    }

    if(status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10d      	bne.n	8004126 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	3b01      	subs	r3, #1
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	430b      	orrs	r3, r1
 8004120:	4939      	ldr	r1, [pc, #228]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d167      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a35      	ldr	r2, [pc, #212]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004138:	f7fd fa44 	bl	80015c4 <HAL_GetTick>
 800413c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800413e:	e009      	b.n	8004154 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004140:	f7fd fa40 	bl	80015c4 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d902      	bls.n	8004154 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	73fb      	strb	r3, [r7, #15]
        break;
 8004152:	e005      	b.n	8004160 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004154:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ef      	bne.n	8004140 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d14a      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800416c:	4b26      	ldr	r3, [pc, #152]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	0211      	lsls	r1, r2, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68d2      	ldr	r2, [r2, #12]
 8004182:	0912      	lsrs	r2, r2, #4
 8004184:	0452      	lsls	r2, r2, #17
 8004186:	430a      	orrs	r2, r1
 8004188:	491f      	ldr	r1, [pc, #124]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418a:	4313      	orrs	r3, r2
 800418c:	614b      	str	r3, [r1, #20]
 800418e:	e011      	b.n	80041b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6892      	ldr	r2, [r2, #8]
 80041a0:	0211      	lsls	r1, r2, #8
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6912      	ldr	r2, [r2, #16]
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	0652      	lsls	r2, r2, #25
 80041ac:	430a      	orrs	r2, r1
 80041ae:	4916      	ldr	r1, [pc, #88]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a13      	ldr	r2, [pc, #76]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fd fa00 	bl	80015c4 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041c6:	e009      	b.n	80041dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041c8:	f7fd f9fc 	bl	80015c4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d902      	bls.n	80041dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	73fb      	strb	r3, [r7, #15]
          break;
 80041da:	e005      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ef      	beq.n	80041c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	4904      	ldr	r1, [pc, #16]	; (8004208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e049      	b.n	80042b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd f804 	bl	8001240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f000 f9ee 	bl	800462c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d001      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e04f      	b.n	8004374 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a23      	ldr	r2, [pc, #140]	; (8004380 <HAL_TIM_Base_Start_IT+0xc4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01d      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0x76>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d018      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0x76>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1f      	ldr	r2, [pc, #124]	; (8004384 <HAL_TIM_Base_Start_IT+0xc8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0x76>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <HAL_TIM_Base_Start_IT+0xcc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0x76>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <HAL_TIM_Base_Start_IT+0xd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0x76>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_TIM_Base_Start_IT+0xd4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_TIM_Base_Start_IT+0x76>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <HAL_TIM_Base_Start_IT+0xd8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d115      	bne.n	800435e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_TIM_Base_Start_IT+0xdc>)
 800433a:	4013      	ands	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b06      	cmp	r3, #6
 8004342:	d015      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0xb4>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434a:	d011      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435c:	e008      	b.n	8004370 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e000      	b.n	8004372 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40013400 	.word	0x40013400
 8004394:	40014000 	.word	0x40014000
 8004398:	00010007 	.word	0x00010007

0800439c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0202 	mvn.w	r2, #2
 80043c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f905 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f8f7 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f908 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0204 	mvn.w	r2, #4
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8db 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8cd 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f8de 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b08      	cmp	r3, #8
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0208 	mvn.w	r2, #8
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2204      	movs	r2, #4
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8b1 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8a3 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8b4 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0210 	mvn.w	r2, #16
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2208      	movs	r2, #8
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f887 	bl	80045ee <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f879 	bl	80045da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f88a 	bl	8004602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0201 	mvn.w	r2, #1
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fbe4 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b80      	cmp	r3, #128	; 0x80
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f914 	bl	8004774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455a:	d10e      	bne.n	800457a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b80      	cmp	r3, #128	; 0x80
 8004568:	d107      	bne.n	800457a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f907 	bl	8004788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d10e      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d107      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800459e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f838 	bl	8004616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d10e      	bne.n	80045d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d107      	bne.n	80045d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f06f 0220 	mvn.w	r2, #32
 80045ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f8c7 	bl	8004760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a40      	ldr	r2, [pc, #256]	; (8004740 <TIM_Base_SetConfig+0x114>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d00f      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a3d      	ldr	r2, [pc, #244]	; (8004744 <TIM_Base_SetConfig+0x118>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00b      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a3c      	ldr	r2, [pc, #240]	; (8004748 <TIM_Base_SetConfig+0x11c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a3b      	ldr	r2, [pc, #236]	; (800474c <TIM_Base_SetConfig+0x120>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0x40>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a3a      	ldr	r2, [pc, #232]	; (8004750 <TIM_Base_SetConfig+0x124>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d108      	bne.n	800467e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <TIM_Base_SetConfig+0x114>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01f      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d01b      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <TIM_Base_SetConfig+0x118>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d017      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a2b      	ldr	r2, [pc, #172]	; (8004748 <TIM_Base_SetConfig+0x11c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a2a      	ldr	r2, [pc, #168]	; (800474c <TIM_Base_SetConfig+0x120>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00f      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a29      	ldr	r2, [pc, #164]	; (8004750 <TIM_Base_SetConfig+0x124>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a28      	ldr	r2, [pc, #160]	; (8004754 <TIM_Base_SetConfig+0x128>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a27      	ldr	r2, [pc, #156]	; (8004758 <TIM_Base_SetConfig+0x12c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_Base_SetConfig+0x9a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a26      	ldr	r2, [pc, #152]	; (800475c <TIM_Base_SetConfig+0x130>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a10      	ldr	r2, [pc, #64]	; (8004740 <TIM_Base_SetConfig+0x114>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0xf8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <TIM_Base_SetConfig+0x124>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0xf8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a11      	ldr	r2, [pc, #68]	; (8004754 <TIM_Base_SetConfig+0x128>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0xf8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a10      	ldr	r2, [pc, #64]	; (8004758 <TIM_Base_SetConfig+0x12c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0xf8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <TIM_Base_SetConfig+0x130>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d103      	bne.n	800472c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	615a      	str	r2, [r3, #20]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40013400 	.word	0x40013400
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800

08004760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e040      	b.n	8004830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc fdc4 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f916 	bl	8004a0c <UART_SetConfig>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e022      	b.n	8004830 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fbc2 	bl	8004f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fc49 	bl	80050c0 <UART_CheckIdleState>
 800482e:	4603      	mov	r3, r0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e048      	b.n	80048dc <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc fd76 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8c8 	bl	8004a0c <UART_SetConfig>
 800487c:	4603      	mov	r3, r0
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e02a      	b.n	80048dc <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fb74 	bl	8004f7c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80048b2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0208 	orr.w	r2, r2, #8
 80048c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fbf3 	bl	80050c0 <UART_CheckIdleState>
 80048da:	4603      	mov	r3, r0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	f040 8082 	bne.w	8004a02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_UART_Transmit+0x26>
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e07a      	b.n	8004a04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Transmit+0x38>
 8004918:	2302      	movs	r3, #2
 800491a:	e073      	b.n	8004a04 <HAL_UART_Transmit+0x120>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2221      	movs	r2, #33	; 0x21
 8004930:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004932:	f7fc fe47 	bl	80015c4 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x80>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004974:	e02d      	b.n	80049d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fbe6 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e039      	b.n	8004a04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a2:	b292      	uxth	r2, r2
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3302      	adds	r3, #2
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e008      	b.n	80049c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b292      	uxth	r2, r2
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1cb      	bne.n	8004976 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	2140      	movs	r1, #64	; 0x40
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fbb2 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e005      	b.n	8004a04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a10:	b08a      	sub	sp, #40	; 0x28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4ba4      	ldr	r3, [pc, #656]	; (8004ccc <UART_SetConfig+0x2c0>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a99      	ldr	r2, [pc, #612]	; (8004cd0 <UART_SetConfig+0x2c4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a74:	4313      	orrs	r3, r2
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a90      	ldr	r2, [pc, #576]	; (8004cd4 <UART_SetConfig+0x2c8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d126      	bne.n	8004ae4 <UART_SetConfig+0xd8>
 8004a96:	4b90      	ldr	r3, [pc, #576]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d81b      	bhi.n	8004adc <UART_SetConfig+0xd0>
 8004aa4:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <UART_SetConfig+0xa0>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004acd 	.word	0x08004acd
 8004ab4:	08004ac5 	.word	0x08004ac5
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e116      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e112      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e10e      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e10a      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e106      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <UART_SetConfig+0x2d0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d138      	bne.n	8004b60 <UART_SetConfig+0x154>
 8004aee:	4b7a      	ldr	r3, [pc, #488]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d82d      	bhi.n	8004b58 <UART_SetConfig+0x14c>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <UART_SetConfig+0xf8>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004b59 	.word	0x08004b59
 8004b0c:	08004b59 	.word	0x08004b59
 8004b10:	08004b59 	.word	0x08004b59
 8004b14:	08004b49 	.word	0x08004b49
 8004b18:	08004b59 	.word	0x08004b59
 8004b1c:	08004b59 	.word	0x08004b59
 8004b20:	08004b59 	.word	0x08004b59
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	08004b59 	.word	0x08004b59
 8004b2c:	08004b59 	.word	0x08004b59
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b51 	.word	0x08004b51
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3e:	e0d8      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004b40:	2302      	movs	r3, #2
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b46:	e0d4      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e0d0      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004b50:	2308      	movs	r3, #8
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e0cc      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5e:	e0c8      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <UART_SetConfig+0x2d4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d125      	bne.n	8004bb6 <UART_SetConfig+0x1aa>
 8004b6a:	4b5b      	ldr	r3, [pc, #364]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d016      	beq.n	8004ba6 <UART_SetConfig+0x19a>
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d818      	bhi.n	8004bae <UART_SetConfig+0x1a2>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d00a      	beq.n	8004b96 <UART_SetConfig+0x18a>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d814      	bhi.n	8004bae <UART_SetConfig+0x1a2>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <UART_SetConfig+0x182>
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d008      	beq.n	8004b9e <UART_SetConfig+0x192>
 8004b8c:	e00f      	b.n	8004bae <UART_SetConfig+0x1a2>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b94:	e0ad      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004b96:	2302      	movs	r3, #2
 8004b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9c:	e0a9      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba4:	e0a5      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bac:	e0a1      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004bae:	2310      	movs	r3, #16
 8004bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb4:	e09d      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a4a      	ldr	r2, [pc, #296]	; (8004ce4 <UART_SetConfig+0x2d8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d125      	bne.n	8004c0c <UART_SetConfig+0x200>
 8004bc0:	4b45      	ldr	r3, [pc, #276]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bca:	2bc0      	cmp	r3, #192	; 0xc0
 8004bcc:	d016      	beq.n	8004bfc <UART_SetConfig+0x1f0>
 8004bce:	2bc0      	cmp	r3, #192	; 0xc0
 8004bd0:	d818      	bhi.n	8004c04 <UART_SetConfig+0x1f8>
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d00a      	beq.n	8004bec <UART_SetConfig+0x1e0>
 8004bd6:	2b80      	cmp	r3, #128	; 0x80
 8004bd8:	d814      	bhi.n	8004c04 <UART_SetConfig+0x1f8>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <UART_SetConfig+0x1d8>
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d008      	beq.n	8004bf4 <UART_SetConfig+0x1e8>
 8004be2:	e00f      	b.n	8004c04 <UART_SetConfig+0x1f8>
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e082      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004bec:	2302      	movs	r3, #2
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e07e      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e07a      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e076      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004c04:	2310      	movs	r3, #16
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e072      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a35      	ldr	r2, [pc, #212]	; (8004ce8 <UART_SetConfig+0x2dc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d12a      	bne.n	8004c6c <UART_SetConfig+0x260>
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c24:	d01a      	beq.n	8004c5c <UART_SetConfig+0x250>
 8004c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2a:	d81b      	bhi.n	8004c64 <UART_SetConfig+0x258>
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c30:	d00c      	beq.n	8004c4c <UART_SetConfig+0x240>
 8004c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c36:	d815      	bhi.n	8004c64 <UART_SetConfig+0x258>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <UART_SetConfig+0x238>
 8004c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c40:	d008      	beq.n	8004c54 <UART_SetConfig+0x248>
 8004c42:	e00f      	b.n	8004c64 <UART_SetConfig+0x258>
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e052      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e04e      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004c54:	2304      	movs	r3, #4
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e04a      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004c5c:	2308      	movs	r3, #8
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e046      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6a:	e042      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <UART_SetConfig+0x2c4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d13a      	bne.n	8004cec <UART_SetConfig+0x2e0>
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <UART_SetConfig+0x2cc>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c84:	d01a      	beq.n	8004cbc <UART_SetConfig+0x2b0>
 8004c86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c8a:	d81b      	bhi.n	8004cc4 <UART_SetConfig+0x2b8>
 8004c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c90:	d00c      	beq.n	8004cac <UART_SetConfig+0x2a0>
 8004c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c96:	d815      	bhi.n	8004cc4 <UART_SetConfig+0x2b8>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <UART_SetConfig+0x298>
 8004c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca0:	d008      	beq.n	8004cb4 <UART_SetConfig+0x2a8>
 8004ca2:	e00f      	b.n	8004cc4 <UART_SetConfig+0x2b8>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004caa:	e022      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004cac:	2302      	movs	r3, #2
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e01e      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e01a      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e016      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e012      	b.n	8004cf2 <UART_SetConfig+0x2e6>
 8004ccc:	efff69f3 	.word	0xefff69f3
 8004cd0:	40008000 	.word	0x40008000
 8004cd4:	40013800 	.word	0x40013800
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40004400 	.word	0x40004400
 8004ce0:	40004800 	.word	0x40004800
 8004ce4:	40004c00 	.word	0x40004c00
 8004ce8:	40005000 	.word	0x40005000
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a9f      	ldr	r2, [pc, #636]	; (8004f74 <UART_SetConfig+0x568>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d17a      	bne.n	8004df2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d824      	bhi.n	8004d4e <UART_SetConfig+0x342>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x300>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d4f 	.word	0x08004d4f
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d4f 	.word	0x08004d4f
 8004d1c:	08004d3f 	.word	0x08004d3f
 8004d20:	08004d4f 	.word	0x08004d4f
 8004d24:	08004d4f 	.word	0x08004d4f
 8004d28:	08004d4f 	.word	0x08004d4f
 8004d2c:	08004d47 	.word	0x08004d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe fd24 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8004d34:	61f8      	str	r0, [r7, #28]
        break;
 8004d36:	e010      	b.n	8004d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d38:	4b8f      	ldr	r3, [pc, #572]	; (8004f78 <UART_SetConfig+0x56c>)
 8004d3a:	61fb      	str	r3, [r7, #28]
        break;
 8004d3c:	e00d      	b.n	8004d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fe fc85 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8004d42:	61f8      	str	r0, [r7, #28]
        break;
 8004d44:	e009      	b.n	8004d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4a:	61fb      	str	r3, [r7, #28]
        break;
 8004d4c:	e005      	b.n	8004d5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80fb 	beq.w	8004f58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d305      	bcc.n	8004d7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d903      	bls.n	8004d86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d84:	e0e8      	b.n	8004f58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	461c      	mov	r4, r3
 8004d8c:	4615      	mov	r5, r2
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	022b      	lsls	r3, r5, #8
 8004d98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d9c:	0222      	lsls	r2, r4, #8
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	6849      	ldr	r1, [r1, #4]
 8004da2:	0849      	lsrs	r1, r1, #1
 8004da4:	2000      	movs	r0, #0
 8004da6:	4688      	mov	r8, r1
 8004da8:	4681      	mov	r9, r0
 8004daa:	eb12 0a08 	adds.w	sl, r2, r8
 8004dae:	eb43 0b09 	adc.w	fp, r3, r9
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dc0:	4650      	mov	r0, sl
 8004dc2:	4659      	mov	r1, fp
 8004dc4:	f7fb fa54 	bl	8000270 <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd6:	d308      	bcc.n	8004dea <UART_SetConfig+0x3de>
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dde:	d204      	bcs.n	8004dea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	e0b6      	b.n	8004f58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004df0:	e0b2      	b.n	8004f58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfa:	d15e      	bne.n	8004eba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d828      	bhi.n	8004e56 <UART_SetConfig+0x44a>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <UART_SetConfig+0x400>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	08004e39 	.word	0x08004e39
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	08004e57 	.word	0x08004e57
 8004e1c:	08004e47 	.word	0x08004e47
 8004e20:	08004e57 	.word	0x08004e57
 8004e24:	08004e57 	.word	0x08004e57
 8004e28:	08004e57 	.word	0x08004e57
 8004e2c:	08004e4f 	.word	0x08004e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e30:	f7fe fca4 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8004e34:	61f8      	str	r0, [r7, #28]
        break;
 8004e36:	e014      	b.n	8004e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fe fcb6 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 8004e3c:	61f8      	str	r0, [r7, #28]
        break;
 8004e3e:	e010      	b.n	8004e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e40:	4b4d      	ldr	r3, [pc, #308]	; (8004f78 <UART_SetConfig+0x56c>)
 8004e42:	61fb      	str	r3, [r7, #28]
        break;
 8004e44:	e00d      	b.n	8004e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e46:	f7fe fc01 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8004e4a:	61f8      	str	r0, [r7, #28]
        break;
 8004e4c:	e009      	b.n	8004e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e52:	61fb      	str	r3, [r7, #28]
        break;
 8004e54:	e005      	b.n	8004e62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d077      	beq.n	8004f58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005a      	lsls	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	441a      	add	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b0f      	cmp	r3, #15
 8004e82:	d916      	bls.n	8004eb2 <UART_SetConfig+0x4a6>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8a:	d212      	bcs.n	8004eb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	f023 030f 	bic.w	r3, r3, #15
 8004e94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	8afb      	ldrh	r3, [r7, #22]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	8afa      	ldrh	r2, [r7, #22]
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	e052      	b.n	8004f58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb8:	e04e      	b.n	8004f58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d827      	bhi.n	8004f12 <UART_SetConfig+0x506>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <UART_SetConfig+0x4bc>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004ef5 	.word	0x08004ef5
 8004ed0:	08004efd 	.word	0x08004efd
 8004ed4:	08004f13 	.word	0x08004f13
 8004ed8:	08004f03 	.word	0x08004f03
 8004edc:	08004f13 	.word	0x08004f13
 8004ee0:	08004f13 	.word	0x08004f13
 8004ee4:	08004f13 	.word	0x08004f13
 8004ee8:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe fc46 	bl	800377c <HAL_RCC_GetPCLK1Freq>
 8004ef0:	61f8      	str	r0, [r7, #28]
        break;
 8004ef2:	e014      	b.n	8004f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fe fc58 	bl	80037a8 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	61f8      	str	r0, [r7, #28]
        break;
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <UART_SetConfig+0x56c>)
 8004efe:	61fb      	str	r3, [r7, #28]
        break;
 8004f00:	e00d      	b.n	8004f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fe fba3 	bl	800364c <HAL_RCC_GetSysClockFreq>
 8004f06:	61f8      	str	r0, [r7, #28]
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0e:	61fb      	str	r3, [r7, #28]
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d019      	beq.n	8004f58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	085a      	lsrs	r2, r3, #1
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	441a      	add	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b0f      	cmp	r3, #15
 8004f3c:	d909      	bls.n	8004f52 <UART_SetConfig+0x546>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d205      	bcs.n	8004f52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e002      	b.n	8004f58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3728      	adds	r7, #40	; 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f72:	bf00      	nop
 8004f74:	40008000 	.word	0x40008000
 8004f78:	00f42400 	.word	0x00f42400

08004f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01a      	beq.n	8005092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507a:	d10a      	bne.n	8005092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050d0:	f7fc fa78 	bl	80015c4 <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10e      	bne.n	8005102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f82d 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e023      	b.n	800514a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d10e      	bne.n	800512e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f817 	bl	8005152 <UART_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00d      	b.n	800514a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b09c      	sub	sp, #112	; 0x70
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005162:	e0a5      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	f000 80a1 	beq.w	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fc fa29 	bl	80015c4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <UART_WaitOnFlagUntilTimeout+0x32>
 800517e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005180:	2b00      	cmp	r3, #0
 8005182:	d13e      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005198:	667b      	str	r3, [r7, #100]	; 0x64
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	663b      	str	r3, [r7, #96]	; 0x60
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e067      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d04f      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800521e:	d147      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005228:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800523e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
 800524a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800524e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e6      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	613b      	str	r3, [r7, #16]
   return(result);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	66bb      	str	r3, [r7, #104]	; 0x68
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800527c:	623a      	str	r2, [r7, #32]
 800527e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	6a3a      	ldr	r2, [r7, #32]
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	61bb      	str	r3, [r7, #24]
   return(result);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e010      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	f43f af4a 	beq.w	8005164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3770      	adds	r7, #112	; 0x70
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <__assert_func>:
 80052dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052de:	4614      	mov	r4, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <__assert_func+0x2c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4605      	mov	r5, r0
 80052e8:	68d8      	ldr	r0, [r3, #12]
 80052ea:	b14c      	cbz	r4, 8005300 <__assert_func+0x24>
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <__assert_func+0x30>)
 80052ee:	9100      	str	r1, [sp, #0]
 80052f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052f4:	4906      	ldr	r1, [pc, #24]	; (8005310 <__assert_func+0x34>)
 80052f6:	462b      	mov	r3, r5
 80052f8:	f000 f814 	bl	8005324 <fiprintf>
 80052fc:	f000 fc5a 	bl	8005bb4 <abort>
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <__assert_func+0x38>)
 8005302:	461c      	mov	r4, r3
 8005304:	e7f3      	b.n	80052ee <__assert_func+0x12>
 8005306:	bf00      	nop
 8005308:	20000014 	.word	0x20000014
 800530c:	080064cc 	.word	0x080064cc
 8005310:	080064d9 	.word	0x080064d9
 8005314:	08006507 	.word	0x08006507

08005318 <__errno>:
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <__errno+0x8>)
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000014 	.word	0x20000014

08005324 <fiprintf>:
 8005324:	b40e      	push	{r1, r2, r3}
 8005326:	b503      	push	{r0, r1, lr}
 8005328:	4601      	mov	r1, r0
 800532a:	ab03      	add	r3, sp, #12
 800532c:	4805      	ldr	r0, [pc, #20]	; (8005344 <fiprintf+0x20>)
 800532e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005332:	6800      	ldr	r0, [r0, #0]
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	f000 f877 	bl	8005428 <_vfiprintf_r>
 800533a:	b002      	add	sp, #8
 800533c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005340:	b003      	add	sp, #12
 8005342:	4770      	bx	lr
 8005344:	20000014 	.word	0x20000014

08005348 <__libc_init_array>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4d0d      	ldr	r5, [pc, #52]	; (8005380 <__libc_init_array+0x38>)
 800534c:	4c0d      	ldr	r4, [pc, #52]	; (8005384 <__libc_init_array+0x3c>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	2600      	movs	r6, #0
 8005354:	42a6      	cmp	r6, r4
 8005356:	d109      	bne.n	800536c <__libc_init_array+0x24>
 8005358:	4d0b      	ldr	r5, [pc, #44]	; (8005388 <__libc_init_array+0x40>)
 800535a:	4c0c      	ldr	r4, [pc, #48]	; (800538c <__libc_init_array+0x44>)
 800535c:	f001 f83e 	bl	80063dc <_init>
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	2600      	movs	r6, #0
 8005366:	42a6      	cmp	r6, r4
 8005368:	d105      	bne.n	8005376 <__libc_init_array+0x2e>
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005370:	4798      	blx	r3
 8005372:	3601      	adds	r6, #1
 8005374:	e7ee      	b.n	8005354 <__libc_init_array+0xc>
 8005376:	f855 3b04 	ldr.w	r3, [r5], #4
 800537a:	4798      	blx	r3
 800537c:	3601      	adds	r6, #1
 800537e:	e7f2      	b.n	8005366 <__libc_init_array+0x1e>
 8005380:	080065cc 	.word	0x080065cc
 8005384:	080065cc 	.word	0x080065cc
 8005388:	080065cc 	.word	0x080065cc
 800538c:	080065d0 	.word	0x080065d0

08005390 <__itoa>:
 8005390:	1e93      	subs	r3, r2, #2
 8005392:	2b22      	cmp	r3, #34	; 0x22
 8005394:	b510      	push	{r4, lr}
 8005396:	460c      	mov	r4, r1
 8005398:	d904      	bls.n	80053a4 <__itoa+0x14>
 800539a:	2300      	movs	r3, #0
 800539c:	700b      	strb	r3, [r1, #0]
 800539e:	461c      	mov	r4, r3
 80053a0:	4620      	mov	r0, r4
 80053a2:	bd10      	pop	{r4, pc}
 80053a4:	2a0a      	cmp	r2, #10
 80053a6:	d109      	bne.n	80053bc <__itoa+0x2c>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	da07      	bge.n	80053bc <__itoa+0x2c>
 80053ac:	232d      	movs	r3, #45	; 0x2d
 80053ae:	700b      	strb	r3, [r1, #0]
 80053b0:	4240      	negs	r0, r0
 80053b2:	2101      	movs	r1, #1
 80053b4:	4421      	add	r1, r4
 80053b6:	f000 fafb 	bl	80059b0 <__utoa>
 80053ba:	e7f1      	b.n	80053a0 <__itoa+0x10>
 80053bc:	2100      	movs	r1, #0
 80053be:	e7f9      	b.n	80053b4 <__itoa+0x24>

080053c0 <itoa>:
 80053c0:	f7ff bfe6 	b.w	8005390 <__itoa>

080053c4 <memset>:
 80053c4:	4402      	add	r2, r0
 80053c6:	4603      	mov	r3, r0
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d100      	bne.n	80053ce <memset+0xa>
 80053cc:	4770      	bx	lr
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7f9      	b.n	80053c8 <memset+0x4>

080053d4 <__sfputc_r>:
 80053d4:	6893      	ldr	r3, [r2, #8]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	b410      	push	{r4}
 80053dc:	6093      	str	r3, [r2, #8]
 80053de:	da08      	bge.n	80053f2 <__sfputc_r+0x1e>
 80053e0:	6994      	ldr	r4, [r2, #24]
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	db01      	blt.n	80053ea <__sfputc_r+0x16>
 80053e6:	290a      	cmp	r1, #10
 80053e8:	d103      	bne.n	80053f2 <__sfputc_r+0x1e>
 80053ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ee:	f000 bb21 	b.w	8005a34 <__swbuf_r>
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	1c58      	adds	r0, r3, #1
 80053f6:	6010      	str	r0, [r2, #0]
 80053f8:	7019      	strb	r1, [r3, #0]
 80053fa:	4608      	mov	r0, r1
 80053fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005400:	4770      	bx	lr

08005402 <__sfputs_r>:
 8005402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005404:	4606      	mov	r6, r0
 8005406:	460f      	mov	r7, r1
 8005408:	4614      	mov	r4, r2
 800540a:	18d5      	adds	r5, r2, r3
 800540c:	42ac      	cmp	r4, r5
 800540e:	d101      	bne.n	8005414 <__sfputs_r+0x12>
 8005410:	2000      	movs	r0, #0
 8005412:	e007      	b.n	8005424 <__sfputs_r+0x22>
 8005414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005418:	463a      	mov	r2, r7
 800541a:	4630      	mov	r0, r6
 800541c:	f7ff ffda 	bl	80053d4 <__sfputc_r>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d1f3      	bne.n	800540c <__sfputs_r+0xa>
 8005424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005428 <_vfiprintf_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	460d      	mov	r5, r1
 800542e:	b09d      	sub	sp, #116	; 0x74
 8005430:	4614      	mov	r4, r2
 8005432:	4698      	mov	r8, r3
 8005434:	4606      	mov	r6, r0
 8005436:	b118      	cbz	r0, 8005440 <_vfiprintf_r+0x18>
 8005438:	6983      	ldr	r3, [r0, #24]
 800543a:	b90b      	cbnz	r3, 8005440 <_vfiprintf_r+0x18>
 800543c:	f000 fcdc 	bl	8005df8 <__sinit>
 8005440:	4b89      	ldr	r3, [pc, #548]	; (8005668 <_vfiprintf_r+0x240>)
 8005442:	429d      	cmp	r5, r3
 8005444:	d11b      	bne.n	800547e <_vfiprintf_r+0x56>
 8005446:	6875      	ldr	r5, [r6, #4]
 8005448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800544a:	07d9      	lsls	r1, r3, #31
 800544c:	d405      	bmi.n	800545a <_vfiprintf_r+0x32>
 800544e:	89ab      	ldrh	r3, [r5, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d402      	bmi.n	800545a <_vfiprintf_r+0x32>
 8005454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005456:	f000 fd6d 	bl	8005f34 <__retarget_lock_acquire_recursive>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	d501      	bpl.n	8005464 <_vfiprintf_r+0x3c>
 8005460:	692b      	ldr	r3, [r5, #16]
 8005462:	b9eb      	cbnz	r3, 80054a0 <_vfiprintf_r+0x78>
 8005464:	4629      	mov	r1, r5
 8005466:	4630      	mov	r0, r6
 8005468:	f000 fb36 	bl	8005ad8 <__swsetup_r>
 800546c:	b1c0      	cbz	r0, 80054a0 <_vfiprintf_r+0x78>
 800546e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005470:	07dc      	lsls	r4, r3, #31
 8005472:	d50e      	bpl.n	8005492 <_vfiprintf_r+0x6a>
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	b01d      	add	sp, #116	; 0x74
 800547a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547e:	4b7b      	ldr	r3, [pc, #492]	; (800566c <_vfiprintf_r+0x244>)
 8005480:	429d      	cmp	r5, r3
 8005482:	d101      	bne.n	8005488 <_vfiprintf_r+0x60>
 8005484:	68b5      	ldr	r5, [r6, #8]
 8005486:	e7df      	b.n	8005448 <_vfiprintf_r+0x20>
 8005488:	4b79      	ldr	r3, [pc, #484]	; (8005670 <_vfiprintf_r+0x248>)
 800548a:	429d      	cmp	r5, r3
 800548c:	bf08      	it	eq
 800548e:	68f5      	ldreq	r5, [r6, #12]
 8005490:	e7da      	b.n	8005448 <_vfiprintf_r+0x20>
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	0598      	lsls	r0, r3, #22
 8005496:	d4ed      	bmi.n	8005474 <_vfiprintf_r+0x4c>
 8005498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800549a:	f000 fd4c 	bl	8005f36 <__retarget_lock_release_recursive>
 800549e:	e7e9      	b.n	8005474 <_vfiprintf_r+0x4c>
 80054a0:	2300      	movs	r3, #0
 80054a2:	9309      	str	r3, [sp, #36]	; 0x24
 80054a4:	2320      	movs	r3, #32
 80054a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ae:	2330      	movs	r3, #48	; 0x30
 80054b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005674 <_vfiprintf_r+0x24c>
 80054b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b8:	f04f 0901 	mov.w	r9, #1
 80054bc:	4623      	mov	r3, r4
 80054be:	469a      	mov	sl, r3
 80054c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054c4:	b10a      	cbz	r2, 80054ca <_vfiprintf_r+0xa2>
 80054c6:	2a25      	cmp	r2, #37	; 0x25
 80054c8:	d1f9      	bne.n	80054be <_vfiprintf_r+0x96>
 80054ca:	ebba 0b04 	subs.w	fp, sl, r4
 80054ce:	d00b      	beq.n	80054e8 <_vfiprintf_r+0xc0>
 80054d0:	465b      	mov	r3, fp
 80054d2:	4622      	mov	r2, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7ff ff93 	bl	8005402 <__sfputs_r>
 80054dc:	3001      	adds	r0, #1
 80054de:	f000 80aa 	beq.w	8005636 <_vfiprintf_r+0x20e>
 80054e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e4:	445a      	add	r2, fp
 80054e6:	9209      	str	r2, [sp, #36]	; 0x24
 80054e8:	f89a 3000 	ldrb.w	r3, [sl]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a2 	beq.w	8005636 <_vfiprintf_r+0x20e>
 80054f2:	2300      	movs	r3, #0
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054fc:	f10a 0a01 	add.w	sl, sl, #1
 8005500:	9304      	str	r3, [sp, #16]
 8005502:	9307      	str	r3, [sp, #28]
 8005504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005508:	931a      	str	r3, [sp, #104]	; 0x68
 800550a:	4654      	mov	r4, sl
 800550c:	2205      	movs	r2, #5
 800550e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005512:	4858      	ldr	r0, [pc, #352]	; (8005674 <_vfiprintf_r+0x24c>)
 8005514:	f7fa fe5c 	bl	80001d0 <memchr>
 8005518:	9a04      	ldr	r2, [sp, #16]
 800551a:	b9d8      	cbnz	r0, 8005554 <_vfiprintf_r+0x12c>
 800551c:	06d1      	lsls	r1, r2, #27
 800551e:	bf44      	itt	mi
 8005520:	2320      	movmi	r3, #32
 8005522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005526:	0713      	lsls	r3, r2, #28
 8005528:	bf44      	itt	mi
 800552a:	232b      	movmi	r3, #43	; 0x2b
 800552c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005530:	f89a 3000 	ldrb.w	r3, [sl]
 8005534:	2b2a      	cmp	r3, #42	; 0x2a
 8005536:	d015      	beq.n	8005564 <_vfiprintf_r+0x13c>
 8005538:	9a07      	ldr	r2, [sp, #28]
 800553a:	4654      	mov	r4, sl
 800553c:	2000      	movs	r0, #0
 800553e:	f04f 0c0a 	mov.w	ip, #10
 8005542:	4621      	mov	r1, r4
 8005544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005548:	3b30      	subs	r3, #48	; 0x30
 800554a:	2b09      	cmp	r3, #9
 800554c:	d94e      	bls.n	80055ec <_vfiprintf_r+0x1c4>
 800554e:	b1b0      	cbz	r0, 800557e <_vfiprintf_r+0x156>
 8005550:	9207      	str	r2, [sp, #28]
 8005552:	e014      	b.n	800557e <_vfiprintf_r+0x156>
 8005554:	eba0 0308 	sub.w	r3, r0, r8
 8005558:	fa09 f303 	lsl.w	r3, r9, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	46a2      	mov	sl, r4
 8005562:	e7d2      	b.n	800550a <_vfiprintf_r+0xe2>
 8005564:	9b03      	ldr	r3, [sp, #12]
 8005566:	1d19      	adds	r1, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	9103      	str	r1, [sp, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	bfbb      	ittet	lt
 8005570:	425b      	neglt	r3, r3
 8005572:	f042 0202 	orrlt.w	r2, r2, #2
 8005576:	9307      	strge	r3, [sp, #28]
 8005578:	9307      	strlt	r3, [sp, #28]
 800557a:	bfb8      	it	lt
 800557c:	9204      	strlt	r2, [sp, #16]
 800557e:	7823      	ldrb	r3, [r4, #0]
 8005580:	2b2e      	cmp	r3, #46	; 0x2e
 8005582:	d10c      	bne.n	800559e <_vfiprintf_r+0x176>
 8005584:	7863      	ldrb	r3, [r4, #1]
 8005586:	2b2a      	cmp	r3, #42	; 0x2a
 8005588:	d135      	bne.n	80055f6 <_vfiprintf_r+0x1ce>
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	9203      	str	r2, [sp, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	bfb8      	it	lt
 8005596:	f04f 33ff 	movlt.w	r3, #4294967295
 800559a:	3402      	adds	r4, #2
 800559c:	9305      	str	r3, [sp, #20]
 800559e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005684 <_vfiprintf_r+0x25c>
 80055a2:	7821      	ldrb	r1, [r4, #0]
 80055a4:	2203      	movs	r2, #3
 80055a6:	4650      	mov	r0, sl
 80055a8:	f7fa fe12 	bl	80001d0 <memchr>
 80055ac:	b140      	cbz	r0, 80055c0 <_vfiprintf_r+0x198>
 80055ae:	2340      	movs	r3, #64	; 0x40
 80055b0:	eba0 000a 	sub.w	r0, r0, sl
 80055b4:	fa03 f000 	lsl.w	r0, r3, r0
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	4303      	orrs	r3, r0
 80055bc:	3401      	adds	r4, #1
 80055be:	9304      	str	r3, [sp, #16]
 80055c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c4:	482c      	ldr	r0, [pc, #176]	; (8005678 <_vfiprintf_r+0x250>)
 80055c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055ca:	2206      	movs	r2, #6
 80055cc:	f7fa fe00 	bl	80001d0 <memchr>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d03f      	beq.n	8005654 <_vfiprintf_r+0x22c>
 80055d4:	4b29      	ldr	r3, [pc, #164]	; (800567c <_vfiprintf_r+0x254>)
 80055d6:	bb1b      	cbnz	r3, 8005620 <_vfiprintf_r+0x1f8>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	3307      	adds	r3, #7
 80055dc:	f023 0307 	bic.w	r3, r3, #7
 80055e0:	3308      	adds	r3, #8
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e6:	443b      	add	r3, r7
 80055e8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ea:	e767      	b.n	80054bc <_vfiprintf_r+0x94>
 80055ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80055f0:	460c      	mov	r4, r1
 80055f2:	2001      	movs	r0, #1
 80055f4:	e7a5      	b.n	8005542 <_vfiprintf_r+0x11a>
 80055f6:	2300      	movs	r3, #0
 80055f8:	3401      	adds	r4, #1
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	4619      	mov	r1, r3
 80055fe:	f04f 0c0a 	mov.w	ip, #10
 8005602:	4620      	mov	r0, r4
 8005604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005608:	3a30      	subs	r2, #48	; 0x30
 800560a:	2a09      	cmp	r2, #9
 800560c:	d903      	bls.n	8005616 <_vfiprintf_r+0x1ee>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0c5      	beq.n	800559e <_vfiprintf_r+0x176>
 8005612:	9105      	str	r1, [sp, #20]
 8005614:	e7c3      	b.n	800559e <_vfiprintf_r+0x176>
 8005616:	fb0c 2101 	mla	r1, ip, r1, r2
 800561a:	4604      	mov	r4, r0
 800561c:	2301      	movs	r3, #1
 800561e:	e7f0      	b.n	8005602 <_vfiprintf_r+0x1da>
 8005620:	ab03      	add	r3, sp, #12
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	462a      	mov	r2, r5
 8005626:	4b16      	ldr	r3, [pc, #88]	; (8005680 <_vfiprintf_r+0x258>)
 8005628:	a904      	add	r1, sp, #16
 800562a:	4630      	mov	r0, r6
 800562c:	f3af 8000 	nop.w
 8005630:	4607      	mov	r7, r0
 8005632:	1c78      	adds	r0, r7, #1
 8005634:	d1d6      	bne.n	80055e4 <_vfiprintf_r+0x1bc>
 8005636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005638:	07d9      	lsls	r1, r3, #31
 800563a:	d405      	bmi.n	8005648 <_vfiprintf_r+0x220>
 800563c:	89ab      	ldrh	r3, [r5, #12]
 800563e:	059a      	lsls	r2, r3, #22
 8005640:	d402      	bmi.n	8005648 <_vfiprintf_r+0x220>
 8005642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005644:	f000 fc77 	bl	8005f36 <__retarget_lock_release_recursive>
 8005648:	89ab      	ldrh	r3, [r5, #12]
 800564a:	065b      	lsls	r3, r3, #25
 800564c:	f53f af12 	bmi.w	8005474 <_vfiprintf_r+0x4c>
 8005650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005652:	e711      	b.n	8005478 <_vfiprintf_r+0x50>
 8005654:	ab03      	add	r3, sp, #12
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	462a      	mov	r2, r5
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <_vfiprintf_r+0x258>)
 800565c:	a904      	add	r1, sp, #16
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f880 	bl	8005764 <_printf_i>
 8005664:	e7e4      	b.n	8005630 <_vfiprintf_r+0x208>
 8005666:	bf00      	nop
 8005668:	08006584 	.word	0x08006584
 800566c:	080065a4 	.word	0x080065a4
 8005670:	08006564 	.word	0x08006564
 8005674:	0800650c 	.word	0x0800650c
 8005678:	08006516 	.word	0x08006516
 800567c:	00000000 	.word	0x00000000
 8005680:	08005403 	.word	0x08005403
 8005684:	08006512 	.word	0x08006512

08005688 <_printf_common>:
 8005688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	4616      	mov	r6, r2
 800568e:	4699      	mov	r9, r3
 8005690:	688a      	ldr	r2, [r1, #8]
 8005692:	690b      	ldr	r3, [r1, #16]
 8005694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005698:	4293      	cmp	r3, r2
 800569a:	bfb8      	it	lt
 800569c:	4613      	movlt	r3, r2
 800569e:	6033      	str	r3, [r6, #0]
 80056a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056a4:	4607      	mov	r7, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	b10a      	cbz	r2, 80056ae <_printf_common+0x26>
 80056aa:	3301      	adds	r3, #1
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	0699      	lsls	r1, r3, #26
 80056b2:	bf42      	ittt	mi
 80056b4:	6833      	ldrmi	r3, [r6, #0]
 80056b6:	3302      	addmi	r3, #2
 80056b8:	6033      	strmi	r3, [r6, #0]
 80056ba:	6825      	ldr	r5, [r4, #0]
 80056bc:	f015 0506 	ands.w	r5, r5, #6
 80056c0:	d106      	bne.n	80056d0 <_printf_common+0x48>
 80056c2:	f104 0a19 	add.w	sl, r4, #25
 80056c6:	68e3      	ldr	r3, [r4, #12]
 80056c8:	6832      	ldr	r2, [r6, #0]
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	42ab      	cmp	r3, r5
 80056ce:	dc26      	bgt.n	800571e <_printf_common+0x96>
 80056d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056d4:	1e13      	subs	r3, r2, #0
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	bf18      	it	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	0692      	lsls	r2, r2, #26
 80056de:	d42b      	bmi.n	8005738 <_printf_common+0xb0>
 80056e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056e4:	4649      	mov	r1, r9
 80056e6:	4638      	mov	r0, r7
 80056e8:	47c0      	blx	r8
 80056ea:	3001      	adds	r0, #1
 80056ec:	d01e      	beq.n	800572c <_printf_common+0xa4>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	68e5      	ldr	r5, [r4, #12]
 80056f2:	6832      	ldr	r2, [r6, #0]
 80056f4:	f003 0306 	and.w	r3, r3, #6
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	bf08      	it	eq
 80056fc:	1aad      	subeq	r5, r5, r2
 80056fe:	68a3      	ldr	r3, [r4, #8]
 8005700:	6922      	ldr	r2, [r4, #16]
 8005702:	bf0c      	ite	eq
 8005704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005708:	2500      	movne	r5, #0
 800570a:	4293      	cmp	r3, r2
 800570c:	bfc4      	itt	gt
 800570e:	1a9b      	subgt	r3, r3, r2
 8005710:	18ed      	addgt	r5, r5, r3
 8005712:	2600      	movs	r6, #0
 8005714:	341a      	adds	r4, #26
 8005716:	42b5      	cmp	r5, r6
 8005718:	d11a      	bne.n	8005750 <_printf_common+0xc8>
 800571a:	2000      	movs	r0, #0
 800571c:	e008      	b.n	8005730 <_printf_common+0xa8>
 800571e:	2301      	movs	r3, #1
 8005720:	4652      	mov	r2, sl
 8005722:	4649      	mov	r1, r9
 8005724:	4638      	mov	r0, r7
 8005726:	47c0      	blx	r8
 8005728:	3001      	adds	r0, #1
 800572a:	d103      	bne.n	8005734 <_printf_common+0xac>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005734:	3501      	adds	r5, #1
 8005736:	e7c6      	b.n	80056c6 <_printf_common+0x3e>
 8005738:	18e1      	adds	r1, r4, r3
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	2030      	movs	r0, #48	; 0x30
 800573e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005742:	4422      	add	r2, r4
 8005744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800574c:	3302      	adds	r3, #2
 800574e:	e7c7      	b.n	80056e0 <_printf_common+0x58>
 8005750:	2301      	movs	r3, #1
 8005752:	4622      	mov	r2, r4
 8005754:	4649      	mov	r1, r9
 8005756:	4638      	mov	r0, r7
 8005758:	47c0      	blx	r8
 800575a:	3001      	adds	r0, #1
 800575c:	d0e6      	beq.n	800572c <_printf_common+0xa4>
 800575e:	3601      	adds	r6, #1
 8005760:	e7d9      	b.n	8005716 <_printf_common+0x8e>
	...

08005764 <_printf_i>:
 8005764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	7e0f      	ldrb	r7, [r1, #24]
 800576a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800576c:	2f78      	cmp	r7, #120	; 0x78
 800576e:	4691      	mov	r9, r2
 8005770:	4680      	mov	r8, r0
 8005772:	460c      	mov	r4, r1
 8005774:	469a      	mov	sl, r3
 8005776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800577a:	d807      	bhi.n	800578c <_printf_i+0x28>
 800577c:	2f62      	cmp	r7, #98	; 0x62
 800577e:	d80a      	bhi.n	8005796 <_printf_i+0x32>
 8005780:	2f00      	cmp	r7, #0
 8005782:	f000 80d8 	beq.w	8005936 <_printf_i+0x1d2>
 8005786:	2f58      	cmp	r7, #88	; 0x58
 8005788:	f000 80a3 	beq.w	80058d2 <_printf_i+0x16e>
 800578c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005794:	e03a      	b.n	800580c <_printf_i+0xa8>
 8005796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800579a:	2b15      	cmp	r3, #21
 800579c:	d8f6      	bhi.n	800578c <_printf_i+0x28>
 800579e:	a101      	add	r1, pc, #4	; (adr r1, 80057a4 <_printf_i+0x40>)
 80057a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057a4:	080057fd 	.word	0x080057fd
 80057a8:	08005811 	.word	0x08005811
 80057ac:	0800578d 	.word	0x0800578d
 80057b0:	0800578d 	.word	0x0800578d
 80057b4:	0800578d 	.word	0x0800578d
 80057b8:	0800578d 	.word	0x0800578d
 80057bc:	08005811 	.word	0x08005811
 80057c0:	0800578d 	.word	0x0800578d
 80057c4:	0800578d 	.word	0x0800578d
 80057c8:	0800578d 	.word	0x0800578d
 80057cc:	0800578d 	.word	0x0800578d
 80057d0:	0800591d 	.word	0x0800591d
 80057d4:	08005841 	.word	0x08005841
 80057d8:	080058ff 	.word	0x080058ff
 80057dc:	0800578d 	.word	0x0800578d
 80057e0:	0800578d 	.word	0x0800578d
 80057e4:	0800593f 	.word	0x0800593f
 80057e8:	0800578d 	.word	0x0800578d
 80057ec:	08005841 	.word	0x08005841
 80057f0:	0800578d 	.word	0x0800578d
 80057f4:	0800578d 	.word	0x0800578d
 80057f8:	08005907 	.word	0x08005907
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	602a      	str	r2, [r5, #0]
 8005804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800580c:	2301      	movs	r3, #1
 800580e:	e0a3      	b.n	8005958 <_printf_i+0x1f4>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	6829      	ldr	r1, [r5, #0]
 8005814:	0606      	lsls	r6, r0, #24
 8005816:	f101 0304 	add.w	r3, r1, #4
 800581a:	d50a      	bpl.n	8005832 <_printf_i+0xce>
 800581c:	680e      	ldr	r6, [r1, #0]
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	2e00      	cmp	r6, #0
 8005822:	da03      	bge.n	800582c <_printf_i+0xc8>
 8005824:	232d      	movs	r3, #45	; 0x2d
 8005826:	4276      	negs	r6, r6
 8005828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800582c:	485e      	ldr	r0, [pc, #376]	; (80059a8 <_printf_i+0x244>)
 800582e:	230a      	movs	r3, #10
 8005830:	e019      	b.n	8005866 <_printf_i+0x102>
 8005832:	680e      	ldr	r6, [r1, #0]
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800583a:	bf18      	it	ne
 800583c:	b236      	sxthne	r6, r6
 800583e:	e7ef      	b.n	8005820 <_printf_i+0xbc>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	6029      	str	r1, [r5, #0]
 8005848:	0601      	lsls	r1, r0, #24
 800584a:	d501      	bpl.n	8005850 <_printf_i+0xec>
 800584c:	681e      	ldr	r6, [r3, #0]
 800584e:	e002      	b.n	8005856 <_printf_i+0xf2>
 8005850:	0646      	lsls	r6, r0, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0xe8>
 8005854:	881e      	ldrh	r6, [r3, #0]
 8005856:	4854      	ldr	r0, [pc, #336]	; (80059a8 <_printf_i+0x244>)
 8005858:	2f6f      	cmp	r7, #111	; 0x6f
 800585a:	bf0c      	ite	eq
 800585c:	2308      	moveq	r3, #8
 800585e:	230a      	movne	r3, #10
 8005860:	2100      	movs	r1, #0
 8005862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005866:	6865      	ldr	r5, [r4, #4]
 8005868:	60a5      	str	r5, [r4, #8]
 800586a:	2d00      	cmp	r5, #0
 800586c:	bfa2      	ittt	ge
 800586e:	6821      	ldrge	r1, [r4, #0]
 8005870:	f021 0104 	bicge.w	r1, r1, #4
 8005874:	6021      	strge	r1, [r4, #0]
 8005876:	b90e      	cbnz	r6, 800587c <_printf_i+0x118>
 8005878:	2d00      	cmp	r5, #0
 800587a:	d04d      	beq.n	8005918 <_printf_i+0x1b4>
 800587c:	4615      	mov	r5, r2
 800587e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005882:	fb03 6711 	mls	r7, r3, r1, r6
 8005886:	5dc7      	ldrb	r7, [r0, r7]
 8005888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800588c:	4637      	mov	r7, r6
 800588e:	42bb      	cmp	r3, r7
 8005890:	460e      	mov	r6, r1
 8005892:	d9f4      	bls.n	800587e <_printf_i+0x11a>
 8005894:	2b08      	cmp	r3, #8
 8005896:	d10b      	bne.n	80058b0 <_printf_i+0x14c>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	07de      	lsls	r6, r3, #31
 800589c:	d508      	bpl.n	80058b0 <_printf_i+0x14c>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	6861      	ldr	r1, [r4, #4]
 80058a2:	4299      	cmp	r1, r3
 80058a4:	bfde      	ittt	le
 80058a6:	2330      	movle	r3, #48	; 0x30
 80058a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058b0:	1b52      	subs	r2, r2, r5
 80058b2:	6122      	str	r2, [r4, #16]
 80058b4:	f8cd a000 	str.w	sl, [sp]
 80058b8:	464b      	mov	r3, r9
 80058ba:	aa03      	add	r2, sp, #12
 80058bc:	4621      	mov	r1, r4
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff fee2 	bl	8005688 <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d14c      	bne.n	8005962 <_printf_i+0x1fe>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b004      	add	sp, #16
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	4835      	ldr	r0, [pc, #212]	; (80059a8 <_printf_i+0x244>)
 80058d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058d8:	6829      	ldr	r1, [r5, #0]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e0:	6029      	str	r1, [r5, #0]
 80058e2:	061d      	lsls	r5, r3, #24
 80058e4:	d514      	bpl.n	8005910 <_printf_i+0x1ac>
 80058e6:	07df      	lsls	r7, r3, #31
 80058e8:	bf44      	itt	mi
 80058ea:	f043 0320 	orrmi.w	r3, r3, #32
 80058ee:	6023      	strmi	r3, [r4, #0]
 80058f0:	b91e      	cbnz	r6, 80058fa <_printf_i+0x196>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f023 0320 	bic.w	r3, r3, #32
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	2310      	movs	r3, #16
 80058fc:	e7b0      	b.n	8005860 <_printf_i+0xfc>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	f043 0320 	orr.w	r3, r3, #32
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	2378      	movs	r3, #120	; 0x78
 8005908:	4828      	ldr	r0, [pc, #160]	; (80059ac <_printf_i+0x248>)
 800590a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800590e:	e7e3      	b.n	80058d8 <_printf_i+0x174>
 8005910:	0659      	lsls	r1, r3, #25
 8005912:	bf48      	it	mi
 8005914:	b2b6      	uxthmi	r6, r6
 8005916:	e7e6      	b.n	80058e6 <_printf_i+0x182>
 8005918:	4615      	mov	r5, r2
 800591a:	e7bb      	b.n	8005894 <_printf_i+0x130>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	6826      	ldr	r6, [r4, #0]
 8005920:	6961      	ldr	r1, [r4, #20]
 8005922:	1d18      	adds	r0, r3, #4
 8005924:	6028      	str	r0, [r5, #0]
 8005926:	0635      	lsls	r5, r6, #24
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	d501      	bpl.n	8005930 <_printf_i+0x1cc>
 800592c:	6019      	str	r1, [r3, #0]
 800592e:	e002      	b.n	8005936 <_printf_i+0x1d2>
 8005930:	0670      	lsls	r0, r6, #25
 8005932:	d5fb      	bpl.n	800592c <_printf_i+0x1c8>
 8005934:	8019      	strh	r1, [r3, #0]
 8005936:	2300      	movs	r3, #0
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	4615      	mov	r5, r2
 800593c:	e7ba      	b.n	80058b4 <_printf_i+0x150>
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	1d1a      	adds	r2, r3, #4
 8005942:	602a      	str	r2, [r5, #0]
 8005944:	681d      	ldr	r5, [r3, #0]
 8005946:	6862      	ldr	r2, [r4, #4]
 8005948:	2100      	movs	r1, #0
 800594a:	4628      	mov	r0, r5
 800594c:	f7fa fc40 	bl	80001d0 <memchr>
 8005950:	b108      	cbz	r0, 8005956 <_printf_i+0x1f2>
 8005952:	1b40      	subs	r0, r0, r5
 8005954:	6060      	str	r0, [r4, #4]
 8005956:	6863      	ldr	r3, [r4, #4]
 8005958:	6123      	str	r3, [r4, #16]
 800595a:	2300      	movs	r3, #0
 800595c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005960:	e7a8      	b.n	80058b4 <_printf_i+0x150>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	462a      	mov	r2, r5
 8005966:	4649      	mov	r1, r9
 8005968:	4640      	mov	r0, r8
 800596a:	47d0      	blx	sl
 800596c:	3001      	adds	r0, #1
 800596e:	d0ab      	beq.n	80058c8 <_printf_i+0x164>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	079b      	lsls	r3, r3, #30
 8005974:	d413      	bmi.n	800599e <_printf_i+0x23a>
 8005976:	68e0      	ldr	r0, [r4, #12]
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	4298      	cmp	r0, r3
 800597c:	bfb8      	it	lt
 800597e:	4618      	movlt	r0, r3
 8005980:	e7a4      	b.n	80058cc <_printf_i+0x168>
 8005982:	2301      	movs	r3, #1
 8005984:	4632      	mov	r2, r6
 8005986:	4649      	mov	r1, r9
 8005988:	4640      	mov	r0, r8
 800598a:	47d0      	blx	sl
 800598c:	3001      	adds	r0, #1
 800598e:	d09b      	beq.n	80058c8 <_printf_i+0x164>
 8005990:	3501      	adds	r5, #1
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	9903      	ldr	r1, [sp, #12]
 8005996:	1a5b      	subs	r3, r3, r1
 8005998:	42ab      	cmp	r3, r5
 800599a:	dcf2      	bgt.n	8005982 <_printf_i+0x21e>
 800599c:	e7eb      	b.n	8005976 <_printf_i+0x212>
 800599e:	2500      	movs	r5, #0
 80059a0:	f104 0619 	add.w	r6, r4, #25
 80059a4:	e7f5      	b.n	8005992 <_printf_i+0x22e>
 80059a6:	bf00      	nop
 80059a8:	0800651d 	.word	0x0800651d
 80059ac:	0800652e 	.word	0x0800652e

080059b0 <__utoa>:
 80059b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b2:	4c1f      	ldr	r4, [pc, #124]	; (8005a30 <__utoa+0x80>)
 80059b4:	b08b      	sub	sp, #44	; 0x2c
 80059b6:	4605      	mov	r5, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	466e      	mov	r6, sp
 80059bc:	f104 0c20 	add.w	ip, r4, #32
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	6861      	ldr	r1, [r4, #4]
 80059c4:	4637      	mov	r7, r6
 80059c6:	c703      	stmia	r7!, {r0, r1}
 80059c8:	3408      	adds	r4, #8
 80059ca:	4564      	cmp	r4, ip
 80059cc:	463e      	mov	r6, r7
 80059ce:	d1f7      	bne.n	80059c0 <__utoa+0x10>
 80059d0:	7921      	ldrb	r1, [r4, #4]
 80059d2:	7139      	strb	r1, [r7, #4]
 80059d4:	1e91      	subs	r1, r2, #2
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	6038      	str	r0, [r7, #0]
 80059da:	2922      	cmp	r1, #34	; 0x22
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	d904      	bls.n	80059ec <__utoa+0x3c>
 80059e2:	7019      	strb	r1, [r3, #0]
 80059e4:	460b      	mov	r3, r1
 80059e6:	4618      	mov	r0, r3
 80059e8:	b00b      	add	sp, #44	; 0x2c
 80059ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ec:	1e58      	subs	r0, r3, #1
 80059ee:	4684      	mov	ip, r0
 80059f0:	fbb5 f7f2 	udiv	r7, r5, r2
 80059f4:	fb02 5617 	mls	r6, r2, r7, r5
 80059f8:	3628      	adds	r6, #40	; 0x28
 80059fa:	446e      	add	r6, sp
 80059fc:	460c      	mov	r4, r1
 80059fe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005a02:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005a06:	462e      	mov	r6, r5
 8005a08:	42b2      	cmp	r2, r6
 8005a0a:	f101 0101 	add.w	r1, r1, #1
 8005a0e:	463d      	mov	r5, r7
 8005a10:	d9ee      	bls.n	80059f0 <__utoa+0x40>
 8005a12:	2200      	movs	r2, #0
 8005a14:	545a      	strb	r2, [r3, r1]
 8005a16:	1919      	adds	r1, r3, r4
 8005a18:	1aa5      	subs	r5, r4, r2
 8005a1a:	42aa      	cmp	r2, r5
 8005a1c:	dae3      	bge.n	80059e6 <__utoa+0x36>
 8005a1e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005a22:	780e      	ldrb	r6, [r1, #0]
 8005a24:	7006      	strb	r6, [r0, #0]
 8005a26:	3201      	adds	r2, #1
 8005a28:	f801 5901 	strb.w	r5, [r1], #-1
 8005a2c:	e7f4      	b.n	8005a18 <__utoa+0x68>
 8005a2e:	bf00      	nop
 8005a30:	0800653f 	.word	0x0800653f

08005a34 <__swbuf_r>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	460e      	mov	r6, r1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	b118      	cbz	r0, 8005a46 <__swbuf_r+0x12>
 8005a3e:	6983      	ldr	r3, [r0, #24]
 8005a40:	b90b      	cbnz	r3, 8005a46 <__swbuf_r+0x12>
 8005a42:	f000 f9d9 	bl	8005df8 <__sinit>
 8005a46:	4b21      	ldr	r3, [pc, #132]	; (8005acc <__swbuf_r+0x98>)
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	d12b      	bne.n	8005aa4 <__swbuf_r+0x70>
 8005a4c:	686c      	ldr	r4, [r5, #4]
 8005a4e:	69a3      	ldr	r3, [r4, #24]
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	071a      	lsls	r2, r3, #28
 8005a56:	d52f      	bpl.n	8005ab8 <__swbuf_r+0x84>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	b36b      	cbz	r3, 8005ab8 <__swbuf_r+0x84>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	6820      	ldr	r0, [r4, #0]
 8005a60:	1ac0      	subs	r0, r0, r3
 8005a62:	6963      	ldr	r3, [r4, #20]
 8005a64:	b2f6      	uxtb	r6, r6
 8005a66:	4283      	cmp	r3, r0
 8005a68:	4637      	mov	r7, r6
 8005a6a:	dc04      	bgt.n	8005a76 <__swbuf_r+0x42>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 f92e 	bl	8005cd0 <_fflush_r>
 8005a74:	bb30      	cbnz	r0, 8005ac4 <__swbuf_r+0x90>
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	60a3      	str	r3, [r4, #8]
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	6022      	str	r2, [r4, #0]
 8005a82:	701e      	strb	r6, [r3, #0]
 8005a84:	6963      	ldr	r3, [r4, #20]
 8005a86:	3001      	adds	r0, #1
 8005a88:	4283      	cmp	r3, r0
 8005a8a:	d004      	beq.n	8005a96 <__swbuf_r+0x62>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	07db      	lsls	r3, r3, #31
 8005a90:	d506      	bpl.n	8005aa0 <__swbuf_r+0x6c>
 8005a92:	2e0a      	cmp	r6, #10
 8005a94:	d104      	bne.n	8005aa0 <__swbuf_r+0x6c>
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f919 	bl	8005cd0 <_fflush_r>
 8005a9e:	b988      	cbnz	r0, 8005ac4 <__swbuf_r+0x90>
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <__swbuf_r+0x9c>)
 8005aa6:	429c      	cmp	r4, r3
 8005aa8:	d101      	bne.n	8005aae <__swbuf_r+0x7a>
 8005aaa:	68ac      	ldr	r4, [r5, #8]
 8005aac:	e7cf      	b.n	8005a4e <__swbuf_r+0x1a>
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <__swbuf_r+0xa0>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	bf08      	it	eq
 8005ab4:	68ec      	ldreq	r4, [r5, #12]
 8005ab6:	e7ca      	b.n	8005a4e <__swbuf_r+0x1a>
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	f000 f80c 	bl	8005ad8 <__swsetup_r>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d0cb      	beq.n	8005a5c <__swbuf_r+0x28>
 8005ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ac8:	e7ea      	b.n	8005aa0 <__swbuf_r+0x6c>
 8005aca:	bf00      	nop
 8005acc:	08006584 	.word	0x08006584
 8005ad0:	080065a4 	.word	0x080065a4
 8005ad4:	08006564 	.word	0x08006564

08005ad8 <__swsetup_r>:
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <__swsetup_r+0xcc>)
 8005ada:	b570      	push	{r4, r5, r6, lr}
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	b125      	cbz	r5, 8005aee <__swsetup_r+0x16>
 8005ae4:	69ab      	ldr	r3, [r5, #24]
 8005ae6:	b913      	cbnz	r3, 8005aee <__swsetup_r+0x16>
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 f985 	bl	8005df8 <__sinit>
 8005aee:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <__swsetup_r+0xd0>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d10f      	bne.n	8005b14 <__swsetup_r+0x3c>
 8005af4:	686c      	ldr	r4, [r5, #4]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005afc:	0719      	lsls	r1, r3, #28
 8005afe:	d42c      	bmi.n	8005b5a <__swsetup_r+0x82>
 8005b00:	06dd      	lsls	r5, r3, #27
 8005b02:	d411      	bmi.n	8005b28 <__swsetup_r+0x50>
 8005b04:	2309      	movs	r3, #9
 8005b06:	6033      	str	r3, [r6, #0]
 8005b08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	e03e      	b.n	8005b92 <__swsetup_r+0xba>
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <__swsetup_r+0xd4>)
 8005b16:	429c      	cmp	r4, r3
 8005b18:	d101      	bne.n	8005b1e <__swsetup_r+0x46>
 8005b1a:	68ac      	ldr	r4, [r5, #8]
 8005b1c:	e7eb      	b.n	8005af6 <__swsetup_r+0x1e>
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <__swsetup_r+0xd8>)
 8005b20:	429c      	cmp	r4, r3
 8005b22:	bf08      	it	eq
 8005b24:	68ec      	ldreq	r4, [r5, #12]
 8005b26:	e7e6      	b.n	8005af6 <__swsetup_r+0x1e>
 8005b28:	0758      	lsls	r0, r3, #29
 8005b2a:	d512      	bpl.n	8005b52 <__swsetup_r+0x7a>
 8005b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b2e:	b141      	cbz	r1, 8005b42 <__swsetup_r+0x6a>
 8005b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b34:	4299      	cmp	r1, r3
 8005b36:	d002      	beq.n	8005b3e <__swsetup_r+0x66>
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fa63 	bl	8006004 <_free_r>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6363      	str	r3, [r4, #52]	; 0x34
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b48:	81a3      	strh	r3, [r4, #12]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6063      	str	r3, [r4, #4]
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f043 0308 	orr.w	r3, r3, #8
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	b94b      	cbnz	r3, 8005b72 <__swsetup_r+0x9a>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b68:	d003      	beq.n	8005b72 <__swsetup_r+0x9a>
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 fa09 	bl	8005f84 <__smakebuf_r>
 8005b72:	89a0      	ldrh	r0, [r4, #12]
 8005b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b78:	f010 0301 	ands.w	r3, r0, #1
 8005b7c:	d00a      	beq.n	8005b94 <__swsetup_r+0xbc>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60a3      	str	r3, [r4, #8]
 8005b82:	6963      	ldr	r3, [r4, #20]
 8005b84:	425b      	negs	r3, r3
 8005b86:	61a3      	str	r3, [r4, #24]
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	b943      	cbnz	r3, 8005b9e <__swsetup_r+0xc6>
 8005b8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b90:	d1ba      	bne.n	8005b08 <__swsetup_r+0x30>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	0781      	lsls	r1, r0, #30
 8005b96:	bf58      	it	pl
 8005b98:	6963      	ldrpl	r3, [r4, #20]
 8005b9a:	60a3      	str	r3, [r4, #8]
 8005b9c:	e7f4      	b.n	8005b88 <__swsetup_r+0xb0>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e7f7      	b.n	8005b92 <__swsetup_r+0xba>
 8005ba2:	bf00      	nop
 8005ba4:	20000014 	.word	0x20000014
 8005ba8:	08006584 	.word	0x08006584
 8005bac:	080065a4 	.word	0x080065a4
 8005bb0:	08006564 	.word	0x08006564

08005bb4 <abort>:
 8005bb4:	b508      	push	{r3, lr}
 8005bb6:	2006      	movs	r0, #6
 8005bb8:	f000 fb3c 	bl	8006234 <raise>
 8005bbc:	2001      	movs	r0, #1
 8005bbe:	f7fb fa57 	bl	8001070 <_exit>
	...

08005bc4 <__sflush_r>:
 8005bc4:	898a      	ldrh	r2, [r1, #12]
 8005bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bca:	4605      	mov	r5, r0
 8005bcc:	0710      	lsls	r0, r2, #28
 8005bce:	460c      	mov	r4, r1
 8005bd0:	d458      	bmi.n	8005c84 <__sflush_r+0xc0>
 8005bd2:	684b      	ldr	r3, [r1, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dc05      	bgt.n	8005be4 <__sflush_r+0x20>
 8005bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	dc02      	bgt.n	8005be4 <__sflush_r+0x20>
 8005bde:	2000      	movs	r0, #0
 8005be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be6:	2e00      	cmp	r6, #0
 8005be8:	d0f9      	beq.n	8005bde <__sflush_r+0x1a>
 8005bea:	2300      	movs	r3, #0
 8005bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bf0:	682f      	ldr	r7, [r5, #0]
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	d032      	beq.n	8005c5c <__sflush_r+0x98>
 8005bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	075a      	lsls	r2, r3, #29
 8005bfc:	d505      	bpl.n	8005c0a <__sflush_r+0x46>
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	1ac0      	subs	r0, r0, r3
 8005c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c04:	b10b      	cbz	r3, 8005c0a <__sflush_r+0x46>
 8005c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c08:	1ac0      	subs	r0, r0, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c10:	6a21      	ldr	r1, [r4, #32]
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b0      	blx	r6
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	d106      	bne.n	8005c2a <__sflush_r+0x66>
 8005c1c:	6829      	ldr	r1, [r5, #0]
 8005c1e:	291d      	cmp	r1, #29
 8005c20:	d82c      	bhi.n	8005c7c <__sflush_r+0xb8>
 8005c22:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <__sflush_r+0x108>)
 8005c24:	40ca      	lsrs	r2, r1
 8005c26:	07d6      	lsls	r6, r2, #31
 8005c28:	d528      	bpl.n	8005c7c <__sflush_r+0xb8>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	6062      	str	r2, [r4, #4]
 8005c2e:	04d9      	lsls	r1, r3, #19
 8005c30:	6922      	ldr	r2, [r4, #16]
 8005c32:	6022      	str	r2, [r4, #0]
 8005c34:	d504      	bpl.n	8005c40 <__sflush_r+0x7c>
 8005c36:	1c42      	adds	r2, r0, #1
 8005c38:	d101      	bne.n	8005c3e <__sflush_r+0x7a>
 8005c3a:	682b      	ldr	r3, [r5, #0]
 8005c3c:	b903      	cbnz	r3, 8005c40 <__sflush_r+0x7c>
 8005c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c42:	602f      	str	r7, [r5, #0]
 8005c44:	2900      	cmp	r1, #0
 8005c46:	d0ca      	beq.n	8005bde <__sflush_r+0x1a>
 8005c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	d002      	beq.n	8005c56 <__sflush_r+0x92>
 8005c50:	4628      	mov	r0, r5
 8005c52:	f000 f9d7 	bl	8006004 <_free_r>
 8005c56:	2000      	movs	r0, #0
 8005c58:	6360      	str	r0, [r4, #52]	; 0x34
 8005c5a:	e7c1      	b.n	8005be0 <__sflush_r+0x1c>
 8005c5c:	6a21      	ldr	r1, [r4, #32]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b0      	blx	r6
 8005c64:	1c41      	adds	r1, r0, #1
 8005c66:	d1c7      	bne.n	8005bf8 <__sflush_r+0x34>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0c4      	beq.n	8005bf8 <__sflush_r+0x34>
 8005c6e:	2b1d      	cmp	r3, #29
 8005c70:	d001      	beq.n	8005c76 <__sflush_r+0xb2>
 8005c72:	2b16      	cmp	r3, #22
 8005c74:	d101      	bne.n	8005c7a <__sflush_r+0xb6>
 8005c76:	602f      	str	r7, [r5, #0]
 8005c78:	e7b1      	b.n	8005bde <__sflush_r+0x1a>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	e7ad      	b.n	8005be0 <__sflush_r+0x1c>
 8005c84:	690f      	ldr	r7, [r1, #16]
 8005c86:	2f00      	cmp	r7, #0
 8005c88:	d0a9      	beq.n	8005bde <__sflush_r+0x1a>
 8005c8a:	0793      	lsls	r3, r2, #30
 8005c8c:	680e      	ldr	r6, [r1, #0]
 8005c8e:	bf08      	it	eq
 8005c90:	694b      	ldreq	r3, [r1, #20]
 8005c92:	600f      	str	r7, [r1, #0]
 8005c94:	bf18      	it	ne
 8005c96:	2300      	movne	r3, #0
 8005c98:	eba6 0807 	sub.w	r8, r6, r7
 8005c9c:	608b      	str	r3, [r1, #8]
 8005c9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ca2:	dd9c      	ble.n	8005bde <__sflush_r+0x1a>
 8005ca4:	6a21      	ldr	r1, [r4, #32]
 8005ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca8:	4643      	mov	r3, r8
 8005caa:	463a      	mov	r2, r7
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b0      	blx	r6
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	dc06      	bgt.n	8005cc2 <__sflush_r+0xfe>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cba:	81a3      	strh	r3, [r4, #12]
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	e78e      	b.n	8005be0 <__sflush_r+0x1c>
 8005cc2:	4407      	add	r7, r0
 8005cc4:	eba8 0800 	sub.w	r8, r8, r0
 8005cc8:	e7e9      	b.n	8005c9e <__sflush_r+0xda>
 8005cca:	bf00      	nop
 8005ccc:	20400001 	.word	0x20400001

08005cd0 <_fflush_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	690b      	ldr	r3, [r1, #16]
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	b913      	cbnz	r3, 8005ce0 <_fflush_r+0x10>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	4628      	mov	r0, r5
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	b118      	cbz	r0, 8005cea <_fflush_r+0x1a>
 8005ce2:	6983      	ldr	r3, [r0, #24]
 8005ce4:	b90b      	cbnz	r3, 8005cea <_fflush_r+0x1a>
 8005ce6:	f000 f887 	bl	8005df8 <__sinit>
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <_fflush_r+0x6c>)
 8005cec:	429c      	cmp	r4, r3
 8005cee:	d11b      	bne.n	8005d28 <_fflush_r+0x58>
 8005cf0:	686c      	ldr	r4, [r5, #4]
 8005cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ef      	beq.n	8005cda <_fflush_r+0xa>
 8005cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cfc:	07d0      	lsls	r0, r2, #31
 8005cfe:	d404      	bmi.n	8005d0a <_fflush_r+0x3a>
 8005d00:	0599      	lsls	r1, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_fflush_r+0x3a>
 8005d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d06:	f000 f915 	bl	8005f34 <__retarget_lock_acquire_recursive>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	f7ff ff59 	bl	8005bc4 <__sflush_r>
 8005d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d14:	07da      	lsls	r2, r3, #31
 8005d16:	4605      	mov	r5, r0
 8005d18:	d4e0      	bmi.n	8005cdc <_fflush_r+0xc>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	d4dd      	bmi.n	8005cdc <_fflush_r+0xc>
 8005d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d22:	f000 f908 	bl	8005f36 <__retarget_lock_release_recursive>
 8005d26:	e7d9      	b.n	8005cdc <_fflush_r+0xc>
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <_fflush_r+0x70>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d101      	bne.n	8005d32 <_fflush_r+0x62>
 8005d2e:	68ac      	ldr	r4, [r5, #8]
 8005d30:	e7df      	b.n	8005cf2 <_fflush_r+0x22>
 8005d32:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <_fflush_r+0x74>)
 8005d34:	429c      	cmp	r4, r3
 8005d36:	bf08      	it	eq
 8005d38:	68ec      	ldreq	r4, [r5, #12]
 8005d3a:	e7da      	b.n	8005cf2 <_fflush_r+0x22>
 8005d3c:	08006584 	.word	0x08006584
 8005d40:	080065a4 	.word	0x080065a4
 8005d44:	08006564 	.word	0x08006564

08005d48 <std>:
 8005d48:	2300      	movs	r3, #0
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d56:	6083      	str	r3, [r0, #8]
 8005d58:	8181      	strh	r1, [r0, #12]
 8005d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d5c:	81c2      	strh	r2, [r0, #14]
 8005d5e:	6183      	str	r3, [r0, #24]
 8005d60:	4619      	mov	r1, r3
 8005d62:	2208      	movs	r2, #8
 8005d64:	305c      	adds	r0, #92	; 0x5c
 8005d66:	f7ff fb2d 	bl	80053c4 <memset>
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x38>)
 8005d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x3c>)
 8005d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <std+0x40>)
 8005d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <std+0x44>)
 8005d78:	6224      	str	r4, [r4, #32]
 8005d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	bf00      	nop
 8005d80:	0800626d 	.word	0x0800626d
 8005d84:	0800628f 	.word	0x0800628f
 8005d88:	080062c7 	.word	0x080062c7
 8005d8c:	080062eb 	.word	0x080062eb

08005d90 <_cleanup_r>:
 8005d90:	4901      	ldr	r1, [pc, #4]	; (8005d98 <_cleanup_r+0x8>)
 8005d92:	f000 b8af 	b.w	8005ef4 <_fwalk_reent>
 8005d96:	bf00      	nop
 8005d98:	08005cd1 	.word	0x08005cd1

08005d9c <__sfmoreglue>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	2268      	movs	r2, #104	; 0x68
 8005da0:	1e4d      	subs	r5, r1, #1
 8005da2:	4355      	muls	r5, r2
 8005da4:	460e      	mov	r6, r1
 8005da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005daa:	f000 f997 	bl	80060dc <_malloc_r>
 8005dae:	4604      	mov	r4, r0
 8005db0:	b140      	cbz	r0, 8005dc4 <__sfmoreglue+0x28>
 8005db2:	2100      	movs	r1, #0
 8005db4:	e9c0 1600 	strd	r1, r6, [r0]
 8005db8:	300c      	adds	r0, #12
 8005dba:	60a0      	str	r0, [r4, #8]
 8005dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dc0:	f7ff fb00 	bl	80053c4 <memset>
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}

08005dc8 <__sfp_lock_acquire>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__sfp_lock_acquire+0x8>)
 8005dca:	f000 b8b3 	b.w	8005f34 <__retarget_lock_acquire_recursive>
 8005dce:	bf00      	nop
 8005dd0:	2000024d 	.word	0x2000024d

08005dd4 <__sfp_lock_release>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__sfp_lock_release+0x8>)
 8005dd6:	f000 b8ae 	b.w	8005f36 <__retarget_lock_release_recursive>
 8005dda:	bf00      	nop
 8005ddc:	2000024d 	.word	0x2000024d

08005de0 <__sinit_lock_acquire>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sinit_lock_acquire+0x8>)
 8005de2:	f000 b8a7 	b.w	8005f34 <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	2000024e 	.word	0x2000024e

08005dec <__sinit_lock_release>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__sinit_lock_release+0x8>)
 8005dee:	f000 b8a2 	b.w	8005f36 <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	2000024e 	.word	0x2000024e

08005df8 <__sinit>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff fff0 	bl	8005de0 <__sinit_lock_acquire>
 8005e00:	69a3      	ldr	r3, [r4, #24]
 8005e02:	b11b      	cbz	r3, 8005e0c <__sinit+0x14>
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f7ff bff0 	b.w	8005dec <__sinit_lock_release>
 8005e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e10:	6523      	str	r3, [r4, #80]	; 0x50
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <__sinit+0x68>)
 8005e14:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <__sinit+0x6c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	bf04      	itt	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	61a3      	streq	r3, [r4, #24]
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f820 	bl	8005e68 <__sfp>
 8005e28:	6060      	str	r0, [r4, #4]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f81c 	bl	8005e68 <__sfp>
 8005e30:	60a0      	str	r0, [r4, #8]
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 f818 	bl	8005e68 <__sfp>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	60e0      	str	r0, [r4, #12]
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	6860      	ldr	r0, [r4, #4]
 8005e40:	f7ff ff82 	bl	8005d48 <std>
 8005e44:	68a0      	ldr	r0, [r4, #8]
 8005e46:	2201      	movs	r2, #1
 8005e48:	2109      	movs	r1, #9
 8005e4a:	f7ff ff7d 	bl	8005d48 <std>
 8005e4e:	68e0      	ldr	r0, [r4, #12]
 8005e50:	2202      	movs	r2, #2
 8005e52:	2112      	movs	r1, #18
 8005e54:	f7ff ff78 	bl	8005d48 <std>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	61a3      	str	r3, [r4, #24]
 8005e5c:	e7d2      	b.n	8005e04 <__sinit+0xc>
 8005e5e:	bf00      	nop
 8005e60:	08006508 	.word	0x08006508
 8005e64:	08005d91 	.word	0x08005d91

08005e68 <__sfp>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	f7ff ffac 	bl	8005dc8 <__sfp_lock_acquire>
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <__sfp+0x84>)
 8005e72:	681e      	ldr	r6, [r3, #0]
 8005e74:	69b3      	ldr	r3, [r6, #24]
 8005e76:	b913      	cbnz	r3, 8005e7e <__sfp+0x16>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff ffbd 	bl	8005df8 <__sinit>
 8005e7e:	3648      	adds	r6, #72	; 0x48
 8005e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	d503      	bpl.n	8005e90 <__sfp+0x28>
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	b30b      	cbz	r3, 8005ed0 <__sfp+0x68>
 8005e8c:	6836      	ldr	r6, [r6, #0]
 8005e8e:	e7f7      	b.n	8005e80 <__sfp+0x18>
 8005e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e94:	b9d5      	cbnz	r5, 8005ecc <__sfp+0x64>
 8005e96:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <__sfp+0x88>)
 8005e98:	60e3      	str	r3, [r4, #12]
 8005e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8005ea0:	f000 f847 	bl	8005f32 <__retarget_lock_init_recursive>
 8005ea4:	f7ff ff96 	bl	8005dd4 <__sfp_lock_release>
 8005ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005eb0:	6025      	str	r5, [r4, #0]
 8005eb2:	61a5      	str	r5, [r4, #24]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ebc:	f7ff fa82 	bl	80053c4 <memset>
 8005ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ec8:	4620      	mov	r0, r4
 8005eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ecc:	3468      	adds	r4, #104	; 0x68
 8005ece:	e7d9      	b.n	8005e84 <__sfp+0x1c>
 8005ed0:	2104      	movs	r1, #4
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	f7ff ff62 	bl	8005d9c <__sfmoreglue>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	6030      	str	r0, [r6, #0]
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d1d5      	bne.n	8005e8c <__sfp+0x24>
 8005ee0:	f7ff ff78 	bl	8005dd4 <__sfp_lock_release>
 8005ee4:	230c      	movs	r3, #12
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	e7ee      	b.n	8005ec8 <__sfp+0x60>
 8005eea:	bf00      	nop
 8005eec:	08006508 	.word	0x08006508
 8005ef0:	ffff0001 	.word	0xffff0001

08005ef4 <_fwalk_reent>:
 8005ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef8:	4606      	mov	r6, r0
 8005efa:	4688      	mov	r8, r1
 8005efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f00:	2700      	movs	r7, #0
 8005f02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f06:	f1b9 0901 	subs.w	r9, r9, #1
 8005f0a:	d505      	bpl.n	8005f18 <_fwalk_reent+0x24>
 8005f0c:	6824      	ldr	r4, [r4, #0]
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d1f7      	bne.n	8005f02 <_fwalk_reent+0xe>
 8005f12:	4638      	mov	r0, r7
 8005f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f18:	89ab      	ldrh	r3, [r5, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d907      	bls.n	8005f2e <_fwalk_reent+0x3a>
 8005f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f22:	3301      	adds	r3, #1
 8005f24:	d003      	beq.n	8005f2e <_fwalk_reent+0x3a>
 8005f26:	4629      	mov	r1, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	47c0      	blx	r8
 8005f2c:	4307      	orrs	r7, r0
 8005f2e:	3568      	adds	r5, #104	; 0x68
 8005f30:	e7e9      	b.n	8005f06 <_fwalk_reent+0x12>

08005f32 <__retarget_lock_init_recursive>:
 8005f32:	4770      	bx	lr

08005f34 <__retarget_lock_acquire_recursive>:
 8005f34:	4770      	bx	lr

08005f36 <__retarget_lock_release_recursive>:
 8005f36:	4770      	bx	lr

08005f38 <__swhatbuf_r>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	460e      	mov	r6, r1
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	2900      	cmp	r1, #0
 8005f42:	b096      	sub	sp, #88	; 0x58
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	da08      	bge.n	8005f5c <__swhatbuf_r+0x24>
 8005f4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	602a      	str	r2, [r5, #0]
 8005f52:	061a      	lsls	r2, r3, #24
 8005f54:	d410      	bmi.n	8005f78 <__swhatbuf_r+0x40>
 8005f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5a:	e00e      	b.n	8005f7a <__swhatbuf_r+0x42>
 8005f5c:	466a      	mov	r2, sp
 8005f5e:	f000 f9eb 	bl	8006338 <_fstat_r>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	dbf1      	blt.n	8005f4a <__swhatbuf_r+0x12>
 8005f66:	9a01      	ldr	r2, [sp, #4]
 8005f68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f70:	425a      	negs	r2, r3
 8005f72:	415a      	adcs	r2, r3
 8005f74:	602a      	str	r2, [r5, #0]
 8005f76:	e7ee      	b.n	8005f56 <__swhatbuf_r+0x1e>
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	b016      	add	sp, #88	; 0x58
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f84 <__smakebuf_r>:
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f88:	079d      	lsls	r5, r3, #30
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	d507      	bpl.n	8005fa0 <__smakebuf_r+0x1c>
 8005f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	6123      	str	r3, [r4, #16]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	6163      	str	r3, [r4, #20]
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	ab01      	add	r3, sp, #4
 8005fa2:	466a      	mov	r2, sp
 8005fa4:	f7ff ffc8 	bl	8005f38 <__swhatbuf_r>
 8005fa8:	9900      	ldr	r1, [sp, #0]
 8005faa:	4605      	mov	r5, r0
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 f895 	bl	80060dc <_malloc_r>
 8005fb2:	b948      	cbnz	r0, 8005fc8 <__smakebuf_r+0x44>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d4ef      	bmi.n	8005f9c <__smakebuf_r+0x18>
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	e7e3      	b.n	8005f90 <__smakebuf_r+0xc>
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <__smakebuf_r+0x7c>)
 8005fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	6163      	str	r3, [r4, #20]
 8005fda:	9b01      	ldr	r3, [sp, #4]
 8005fdc:	6120      	str	r0, [r4, #16]
 8005fde:	b15b      	cbz	r3, 8005ff8 <__smakebuf_r+0x74>
 8005fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 f9b9 	bl	800635c <_isatty_r>
 8005fea:	b128      	cbz	r0, 8005ff8 <__smakebuf_r+0x74>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	89a0      	ldrh	r0, [r4, #12]
 8005ffa:	4305      	orrs	r5, r0
 8005ffc:	81a5      	strh	r5, [r4, #12]
 8005ffe:	e7cd      	b.n	8005f9c <__smakebuf_r+0x18>
 8006000:	08005d91 	.word	0x08005d91

08006004 <_free_r>:
 8006004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006006:	2900      	cmp	r1, #0
 8006008:	d044      	beq.n	8006094 <_free_r+0x90>
 800600a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600e:	9001      	str	r0, [sp, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f1a1 0404 	sub.w	r4, r1, #4
 8006016:	bfb8      	it	lt
 8006018:	18e4      	addlt	r4, r4, r3
 800601a:	f000 f9c1 	bl	80063a0 <__malloc_lock>
 800601e:	4a1e      	ldr	r2, [pc, #120]	; (8006098 <_free_r+0x94>)
 8006020:	9801      	ldr	r0, [sp, #4]
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	b933      	cbnz	r3, 8006034 <_free_r+0x30>
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	6014      	str	r4, [r2, #0]
 800602a:	b003      	add	sp, #12
 800602c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006030:	f000 b9bc 	b.w	80063ac <__malloc_unlock>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d908      	bls.n	800604a <_free_r+0x46>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf01      	itttt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	1949      	addeq	r1, r1, r5
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	e7ed      	b.n	8006026 <_free_r+0x22>
 800604a:	461a      	mov	r2, r3
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	b10b      	cbz	r3, 8006054 <_free_r+0x50>
 8006050:	42a3      	cmp	r3, r4
 8006052:	d9fa      	bls.n	800604a <_free_r+0x46>
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	1855      	adds	r5, r2, r1
 8006058:	42a5      	cmp	r5, r4
 800605a:	d10b      	bne.n	8006074 <_free_r+0x70>
 800605c:	6824      	ldr	r4, [r4, #0]
 800605e:	4421      	add	r1, r4
 8006060:	1854      	adds	r4, r2, r1
 8006062:	42a3      	cmp	r3, r4
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	d1e0      	bne.n	800602a <_free_r+0x26>
 8006068:	681c      	ldr	r4, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	6053      	str	r3, [r2, #4]
 800606e:	4421      	add	r1, r4
 8006070:	6011      	str	r1, [r2, #0]
 8006072:	e7da      	b.n	800602a <_free_r+0x26>
 8006074:	d902      	bls.n	800607c <_free_r+0x78>
 8006076:	230c      	movs	r3, #12
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	e7d6      	b.n	800602a <_free_r+0x26>
 800607c:	6825      	ldr	r5, [r4, #0]
 800607e:	1961      	adds	r1, r4, r5
 8006080:	428b      	cmp	r3, r1
 8006082:	bf04      	itt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	6063      	str	r3, [r4, #4]
 800608a:	bf04      	itt	eq
 800608c:	1949      	addeq	r1, r1, r5
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	6054      	str	r4, [r2, #4]
 8006092:	e7ca      	b.n	800602a <_free_r+0x26>
 8006094:	b003      	add	sp, #12
 8006096:	bd30      	pop	{r4, r5, pc}
 8006098:	20000250 	.word	0x20000250

0800609c <sbrk_aligned>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	4e0e      	ldr	r6, [pc, #56]	; (80060d8 <sbrk_aligned+0x3c>)
 80060a0:	460c      	mov	r4, r1
 80060a2:	6831      	ldr	r1, [r6, #0]
 80060a4:	4605      	mov	r5, r0
 80060a6:	b911      	cbnz	r1, 80060ae <sbrk_aligned+0x12>
 80060a8:	f000 f88c 	bl	80061c4 <_sbrk_r>
 80060ac:	6030      	str	r0, [r6, #0]
 80060ae:	4621      	mov	r1, r4
 80060b0:	4628      	mov	r0, r5
 80060b2:	f000 f887 	bl	80061c4 <_sbrk_r>
 80060b6:	1c43      	adds	r3, r0, #1
 80060b8:	d00a      	beq.n	80060d0 <sbrk_aligned+0x34>
 80060ba:	1cc4      	adds	r4, r0, #3
 80060bc:	f024 0403 	bic.w	r4, r4, #3
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d007      	beq.n	80060d4 <sbrk_aligned+0x38>
 80060c4:	1a21      	subs	r1, r4, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f000 f87c 	bl	80061c4 <_sbrk_r>
 80060cc:	3001      	adds	r0, #1
 80060ce:	d101      	bne.n	80060d4 <sbrk_aligned+0x38>
 80060d0:	f04f 34ff 	mov.w	r4, #4294967295
 80060d4:	4620      	mov	r0, r4
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	20000254 	.word	0x20000254

080060dc <_malloc_r>:
 80060dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e0:	1ccd      	adds	r5, r1, #3
 80060e2:	f025 0503 	bic.w	r5, r5, #3
 80060e6:	3508      	adds	r5, #8
 80060e8:	2d0c      	cmp	r5, #12
 80060ea:	bf38      	it	cc
 80060ec:	250c      	movcc	r5, #12
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	4607      	mov	r7, r0
 80060f2:	db01      	blt.n	80060f8 <_malloc_r+0x1c>
 80060f4:	42a9      	cmp	r1, r5
 80060f6:	d905      	bls.n	8006104 <_malloc_r+0x28>
 80060f8:	230c      	movs	r3, #12
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	2600      	movs	r6, #0
 80060fe:	4630      	mov	r0, r6
 8006100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006104:	4e2e      	ldr	r6, [pc, #184]	; (80061c0 <_malloc_r+0xe4>)
 8006106:	f000 f94b 	bl	80063a0 <__malloc_lock>
 800610a:	6833      	ldr	r3, [r6, #0]
 800610c:	461c      	mov	r4, r3
 800610e:	bb34      	cbnz	r4, 800615e <_malloc_r+0x82>
 8006110:	4629      	mov	r1, r5
 8006112:	4638      	mov	r0, r7
 8006114:	f7ff ffc2 	bl	800609c <sbrk_aligned>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	4604      	mov	r4, r0
 800611c:	d14d      	bne.n	80061ba <_malloc_r+0xde>
 800611e:	6834      	ldr	r4, [r6, #0]
 8006120:	4626      	mov	r6, r4
 8006122:	2e00      	cmp	r6, #0
 8006124:	d140      	bne.n	80061a8 <_malloc_r+0xcc>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	4631      	mov	r1, r6
 800612a:	4638      	mov	r0, r7
 800612c:	eb04 0803 	add.w	r8, r4, r3
 8006130:	f000 f848 	bl	80061c4 <_sbrk_r>
 8006134:	4580      	cmp	r8, r0
 8006136:	d13a      	bne.n	80061ae <_malloc_r+0xd2>
 8006138:	6821      	ldr	r1, [r4, #0]
 800613a:	3503      	adds	r5, #3
 800613c:	1a6d      	subs	r5, r5, r1
 800613e:	f025 0503 	bic.w	r5, r5, #3
 8006142:	3508      	adds	r5, #8
 8006144:	2d0c      	cmp	r5, #12
 8006146:	bf38      	it	cc
 8006148:	250c      	movcc	r5, #12
 800614a:	4629      	mov	r1, r5
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff ffa5 	bl	800609c <sbrk_aligned>
 8006152:	3001      	adds	r0, #1
 8006154:	d02b      	beq.n	80061ae <_malloc_r+0xd2>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	442b      	add	r3, r5
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	e00e      	b.n	800617c <_malloc_r+0xa0>
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	1b52      	subs	r2, r2, r5
 8006162:	d41e      	bmi.n	80061a2 <_malloc_r+0xc6>
 8006164:	2a0b      	cmp	r2, #11
 8006166:	d916      	bls.n	8006196 <_malloc_r+0xba>
 8006168:	1961      	adds	r1, r4, r5
 800616a:	42a3      	cmp	r3, r4
 800616c:	6025      	str	r5, [r4, #0]
 800616e:	bf18      	it	ne
 8006170:	6059      	strne	r1, [r3, #4]
 8006172:	6863      	ldr	r3, [r4, #4]
 8006174:	bf08      	it	eq
 8006176:	6031      	streq	r1, [r6, #0]
 8006178:	5162      	str	r2, [r4, r5]
 800617a:	604b      	str	r3, [r1, #4]
 800617c:	4638      	mov	r0, r7
 800617e:	f104 060b 	add.w	r6, r4, #11
 8006182:	f000 f913 	bl	80063ac <__malloc_unlock>
 8006186:	f026 0607 	bic.w	r6, r6, #7
 800618a:	1d23      	adds	r3, r4, #4
 800618c:	1af2      	subs	r2, r6, r3
 800618e:	d0b6      	beq.n	80060fe <_malloc_r+0x22>
 8006190:	1b9b      	subs	r3, r3, r6
 8006192:	50a3      	str	r3, [r4, r2]
 8006194:	e7b3      	b.n	80060fe <_malloc_r+0x22>
 8006196:	6862      	ldr	r2, [r4, #4]
 8006198:	42a3      	cmp	r3, r4
 800619a:	bf0c      	ite	eq
 800619c:	6032      	streq	r2, [r6, #0]
 800619e:	605a      	strne	r2, [r3, #4]
 80061a0:	e7ec      	b.n	800617c <_malloc_r+0xa0>
 80061a2:	4623      	mov	r3, r4
 80061a4:	6864      	ldr	r4, [r4, #4]
 80061a6:	e7b2      	b.n	800610e <_malloc_r+0x32>
 80061a8:	4634      	mov	r4, r6
 80061aa:	6876      	ldr	r6, [r6, #4]
 80061ac:	e7b9      	b.n	8006122 <_malloc_r+0x46>
 80061ae:	230c      	movs	r3, #12
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	4638      	mov	r0, r7
 80061b4:	f000 f8fa 	bl	80063ac <__malloc_unlock>
 80061b8:	e7a1      	b.n	80060fe <_malloc_r+0x22>
 80061ba:	6025      	str	r5, [r4, #0]
 80061bc:	e7de      	b.n	800617c <_malloc_r+0xa0>
 80061be:	bf00      	nop
 80061c0:	20000250 	.word	0x20000250

080061c4 <_sbrk_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d06      	ldr	r5, [pc, #24]	; (80061e0 <_sbrk_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	f7fa ffc6 	bl	8001160 <_sbrk>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_sbrk_r+0x1a>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_sbrk_r+0x1a>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000258 	.word	0x20000258

080061e4 <_raise_r>:
 80061e4:	291f      	cmp	r1, #31
 80061e6:	b538      	push	{r3, r4, r5, lr}
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	d904      	bls.n	80061f8 <_raise_r+0x14>
 80061ee:	2316      	movs	r3, #22
 80061f0:	6003      	str	r3, [r0, #0]
 80061f2:	f04f 30ff 	mov.w	r0, #4294967295
 80061f6:	bd38      	pop	{r3, r4, r5, pc}
 80061f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061fa:	b112      	cbz	r2, 8006202 <_raise_r+0x1e>
 80061fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006200:	b94b      	cbnz	r3, 8006216 <_raise_r+0x32>
 8006202:	4620      	mov	r0, r4
 8006204:	f000 f830 	bl	8006268 <_getpid_r>
 8006208:	462a      	mov	r2, r5
 800620a:	4601      	mov	r1, r0
 800620c:	4620      	mov	r0, r4
 800620e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006212:	f000 b817 	b.w	8006244 <_kill_r>
 8006216:	2b01      	cmp	r3, #1
 8006218:	d00a      	beq.n	8006230 <_raise_r+0x4c>
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	d103      	bne.n	8006226 <_raise_r+0x42>
 800621e:	2316      	movs	r3, #22
 8006220:	6003      	str	r3, [r0, #0]
 8006222:	2001      	movs	r0, #1
 8006224:	e7e7      	b.n	80061f6 <_raise_r+0x12>
 8006226:	2400      	movs	r4, #0
 8006228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800622c:	4628      	mov	r0, r5
 800622e:	4798      	blx	r3
 8006230:	2000      	movs	r0, #0
 8006232:	e7e0      	b.n	80061f6 <_raise_r+0x12>

08006234 <raise>:
 8006234:	4b02      	ldr	r3, [pc, #8]	; (8006240 <raise+0xc>)
 8006236:	4601      	mov	r1, r0
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	f7ff bfd3 	b.w	80061e4 <_raise_r>
 800623e:	bf00      	nop
 8006240:	20000014 	.word	0x20000014

08006244 <_kill_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d07      	ldr	r5, [pc, #28]	; (8006264 <_kill_r+0x20>)
 8006248:	2300      	movs	r3, #0
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	4611      	mov	r1, r2
 8006250:	602b      	str	r3, [r5, #0]
 8006252:	f7fa fefd 	bl	8001050 <_kill>
 8006256:	1c43      	adds	r3, r0, #1
 8006258:	d102      	bne.n	8006260 <_kill_r+0x1c>
 800625a:	682b      	ldr	r3, [r5, #0]
 800625c:	b103      	cbz	r3, 8006260 <_kill_r+0x1c>
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	bd38      	pop	{r3, r4, r5, pc}
 8006262:	bf00      	nop
 8006264:	20000258 	.word	0x20000258

08006268 <_getpid_r>:
 8006268:	f7fa beea 	b.w	8001040 <_getpid>

0800626c <__sread>:
 800626c:	b510      	push	{r4, lr}
 800626e:	460c      	mov	r4, r1
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	f000 f8a0 	bl	80063b8 <_read_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	bfab      	itete	ge
 800627c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800627e:	89a3      	ldrhlt	r3, [r4, #12]
 8006280:	181b      	addge	r3, r3, r0
 8006282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006286:	bfac      	ite	ge
 8006288:	6563      	strge	r3, [r4, #84]	; 0x54
 800628a:	81a3      	strhlt	r3, [r4, #12]
 800628c:	bd10      	pop	{r4, pc}

0800628e <__swrite>:
 800628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	461f      	mov	r7, r3
 8006294:	898b      	ldrh	r3, [r1, #12]
 8006296:	05db      	lsls	r3, r3, #23
 8006298:	4605      	mov	r5, r0
 800629a:	460c      	mov	r4, r1
 800629c:	4616      	mov	r6, r2
 800629e:	d505      	bpl.n	80062ac <__swrite+0x1e>
 80062a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a4:	2302      	movs	r3, #2
 80062a6:	2200      	movs	r2, #0
 80062a8:	f000 f868 	bl	800637c <_lseek_r>
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b6:	81a3      	strh	r3, [r4, #12]
 80062b8:	4632      	mov	r2, r6
 80062ba:	463b      	mov	r3, r7
 80062bc:	4628      	mov	r0, r5
 80062be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062c2:	f000 b817 	b.w	80062f4 <_write_r>

080062c6 <__sseek>:
 80062c6:	b510      	push	{r4, lr}
 80062c8:	460c      	mov	r4, r1
 80062ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ce:	f000 f855 	bl	800637c <_lseek_r>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	bf15      	itete	ne
 80062d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80062da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062e2:	81a3      	strheq	r3, [r4, #12]
 80062e4:	bf18      	it	ne
 80062e6:	81a3      	strhne	r3, [r4, #12]
 80062e8:	bd10      	pop	{r4, pc}

080062ea <__sclose>:
 80062ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ee:	f000 b813 	b.w	8006318 <_close_r>
	...

080062f4 <_write_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4d07      	ldr	r5, [pc, #28]	; (8006314 <_write_r+0x20>)
 80062f8:	4604      	mov	r4, r0
 80062fa:	4608      	mov	r0, r1
 80062fc:	4611      	mov	r1, r2
 80062fe:	2200      	movs	r2, #0
 8006300:	602a      	str	r2, [r5, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f7fa fedb 	bl	80010be <_write>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_write_r+0x1e>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_write_r+0x1e>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20000258 	.word	0x20000258

08006318 <_close_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d06      	ldr	r5, [pc, #24]	; (8006334 <_close_r+0x1c>)
 800631c:	2300      	movs	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	f7fa fee7 	bl	80010f6 <_close>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_close_r+0x1a>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_close_r+0x1a>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	20000258 	.word	0x20000258

08006338 <_fstat_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4d07      	ldr	r5, [pc, #28]	; (8006358 <_fstat_r+0x20>)
 800633c:	2300      	movs	r3, #0
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	4611      	mov	r1, r2
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	f7fa fee2 	bl	800110e <_fstat>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	d102      	bne.n	8006354 <_fstat_r+0x1c>
 800634e:	682b      	ldr	r3, [r5, #0]
 8006350:	b103      	cbz	r3, 8006354 <_fstat_r+0x1c>
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	bd38      	pop	{r3, r4, r5, pc}
 8006356:	bf00      	nop
 8006358:	20000258 	.word	0x20000258

0800635c <_isatty_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d06      	ldr	r5, [pc, #24]	; (8006378 <_isatty_r+0x1c>)
 8006360:	2300      	movs	r3, #0
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	f7fa fee1 	bl	800112e <_isatty>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_isatty_r+0x1a>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_isatty_r+0x1a>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	20000258 	.word	0x20000258

0800637c <_lseek_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d07      	ldr	r5, [pc, #28]	; (800639c <_lseek_r+0x20>)
 8006380:	4604      	mov	r4, r0
 8006382:	4608      	mov	r0, r1
 8006384:	4611      	mov	r1, r2
 8006386:	2200      	movs	r2, #0
 8006388:	602a      	str	r2, [r5, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	f7fa feda 	bl	8001144 <_lseek>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_lseek_r+0x1e>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_lseek_r+0x1e>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000258 	.word	0x20000258

080063a0 <__malloc_lock>:
 80063a0:	4801      	ldr	r0, [pc, #4]	; (80063a8 <__malloc_lock+0x8>)
 80063a2:	f7ff bdc7 	b.w	8005f34 <__retarget_lock_acquire_recursive>
 80063a6:	bf00      	nop
 80063a8:	2000024c 	.word	0x2000024c

080063ac <__malloc_unlock>:
 80063ac:	4801      	ldr	r0, [pc, #4]	; (80063b4 <__malloc_unlock+0x8>)
 80063ae:	f7ff bdc2 	b.w	8005f36 <__retarget_lock_release_recursive>
 80063b2:	bf00      	nop
 80063b4:	2000024c 	.word	0x2000024c

080063b8 <_read_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	; (80063d8 <_read_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fa fe5c 	bl	8001084 <_read>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_read_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_read_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	20000258 	.word	0x20000258

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
